{"version":3,"sources":["serviceWorker.js","components/SceneForm.js","components/SceneMembersForm.js","components/ExportImportDialog.js","components/ScenesList.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","SceneForm","props","setStateWithParent","newState","cb","setState","updateScene","common","native","saveCursorPosition","name","inputs","start","ref","current","selectionStart","end","selectionEnd","sceneObj","scene","JSON","parse","stringify","members","state","showDialog","sceneId","_id","map","React","createRef","this","imagePrefix","socket","dialogName","title","I18n","t","selected","onOk","onClose","on","className","classes","editItem","onTrue","onFalse","enabled","right","Switch","checked","trigger","id","onChange","e","target","condition","Grid","container","spacing","item","xs","TextField","inputRef","Trigger","fullWidth","InputLabelProps","shrink","label","value","onFocus","onKeyDown","onClick","FormControl","InputLabel","Select","MenuItem","Value","Cron","cron","Object","keys","forEach","Box","clsx","columnContainer","oneColumn","height","scroll","Name","Description","desc","sm","width100","engine","instances","replace","min","burstInterval","helperText","type","parseInt","FormControlLabel","style","paddingTop","control","Checkbox","virtualGroup","easy","aggregation","renderOnTrueFalse","renderSelectIdDialog","Component","withStyles","theme","alignRight","textAlign","buttonsContainer","margin","width","display","flexDirection","float","overflowY","overflowX","paddingRight","marginBottom","color","palette","p","background","TRUE_COLOR","FALSE_COLOR","TRUE_DARK_COLOR","FALSE_DARK_COLOR","SceneMembersForm","memberStateChange","states","val","objectTypes","undefined","parseFloat","createSceneMembers","ids","length","openedMembers","objectNames","Promise","all","getObject","then","obj","template","setIfTrue","setIfFalse","stopAllDelays","disabled","delay","Utils","getObjectNameFromObj","language","getLanguage","onFalseEnabled","push","subscribeState","catch","showError","deleteSceneMember","i","splice","deleteDialog","unsubscribeState","renderMember","member","index","_valStr","toString","setIfTrueTolerance","Math","abs","memberTrueFalse","memberTrue","setIfFalseTolerance","memberFalse","memberUncertain","opened","includes","setIfTrueVisible","varType","setIfFalseVisible","stacked","u","stackNextDelays","intervalBetweenCommands","Paper","memberCard","memberToolbar","IconButton","memberFolder","pos","indexOf","sort","localStorage","setItem","memberTitle","memberDesc","memberButtons","size","marginLeft","suppressDeleteConfirm","getItem","Date","now","removeItem","renderSetValue","doNotOverwrite","smallOnTrueFalse","stateValueTrue","stateValueFalse","getItemStyle","isDragging","draggableStyle","userSelect","getListStyle","isDraggingOver","render","sceneState","selectedSceneChanged","engineId","Toolbar","gutters","guttersZero","Typography","variant","sceneTitle","instanceNotActive","sceneSubTitle","sceneTrue","sceneFalse","sceneUncertain","testButtons","width100WithButton","defaultValue","onKeyUp","keyCode","onWriteScene","writeSceneState","sceneEnabled","Button","btnTestTrue","btnTestFalse","btnCollapseAll","btnExpandAll","onDragEnd","droppableId","provided","snapshot","droppableProps","innerRef","draggableId","draggableProps","dragHandleProps","placeholder","renderDeleteDialog","renderSelectStateIdDialog","showSelectValueIdDialog","showSelectValueIdDialogFor","delButtonRef","bind","readObjects","result","destination","source","removed","results","resolve","that","updateSceneMembers","multiSelect","prevProps","prevState","setTimeout","focus","Dialog","open","DialogTitle","DialogContent","DialogActions","startIcon","autoFocus","setValue","m","isTrue","labelSetValue","labelTolerance","setValueTolerance","fromState","root","fromId","Fragment","readOnly","InputProps","endAdornment","setTolerance","changed","borderRadius","padding","fontSize","fontWeight","whiteSpace","maxWidth","overflow","textOverflow","backgroundColor","position","top","left","flexGrow","marginRight","content","fontStyle","minHeight","minWidth","opacity","marginTop","ExportImportDialog","text","error","toast","Snackbar","autoHideDuration","Alert","severity","fullScreen","isImport","divWithoutTitle","mode","onLoad","editor","codeEditor","themeType","newValue","editorProps","$blockScrolling","copy","renderToast","border","Droppable","onDrop","useDrop","accept","drop","isOver","collect","monitor","shallow","isOverAny","children","Draggable","useDrag","drag","transform","ScenesList","renderTreeScene","level","scenes","search","selectedSceneId","listItem","ListItem","paddingLeft","reorder","noPaddings","button","onSceneSelect","ListItemIcon","itemIconRoot","itemIcon","ListItemText","primary","listItemTitle","secondary","listItemSubTitle","ListItemSecondaryAction","changingScene","CircularProgress","event","onSceneEnableDisable","showSearch","addFolderDialog","addFolderDialogTitle","editFolderDialogeditFolderDialog","editFolderDialogTitle","parent","onCreateFolder","FORBIDDEN_CHARS","onAddFolder","folders","subFolders","find","buttonIcon","folder","newName","prefix","onRenameFolder","editFolderDialog","isUnique","editFolderDialogTitleOrigin","confirmCb","selectedSceneData","sceneChangeDialog","console","log","newId","split","pop","onMoveScene","reactChildren","values","a","b","subFolder","renderTree","folderItem","noGutters","toggleFolder","itemIconFolder","onCreateScene","onDragFinish","r","mainToolbar","textInput","toolbarButtons","stopPropagation","renderListToolbar","heightMinusToolbar","backend","HTML5Backend","List","mainList","renderAddFolderDialog","renderEditFolderDialog","main","paddingBottom","leftMenuItem","cursor","list","folderButtons","App","extendedProps","translations","require","addSceneToFolderPrefix","folderPrefix","noRefresh","oldId","delObject","setObject","refreshData","changeSelectedScene","query","parts","decodeURIComponent","getUrlQuery","port","host","iobForceHost","lang","systemLang","ready","exportDialog","importDialog","menuOpened","getSystemConfig","systemConfig","getAdapterInstances","adapterName","sentryEnabled","diag","disableDataReporting","sentryDSN","Sentry","dsn","release","version","integrations","SentryIntegrations","uuidObj","uuid","scope","setUser","shift","currentFolder","findFolder","getObjectView","_scenes","buildTree","getData","burstIntervall","from","user","ts","acl","parentFolder","_parentFolder","moveScript","newSelectedId","join","promises","parentId","role","read","write","def","astro","getNewSceneId","getFolderPrefix","nextId","matches","ignoreUnsaved","writeScene","deleteScene","importedScene","showDrawer","cloneScene","sceneSwitch","addFolder","createScene","renameFolder","Drawer","anchor","paper","drawer","renderDrawerContent","renderSceneTopToolbar","heightMinus2Toolbars","renderSceneSettings","renderSceneMembers","renderSceneBottomToolbar","Container","fullWidthContainer","settingsBackground","heightMinusMargin","membersCell","themeName","renderInOneColumn","renderInMoreThanOneColumn","renderSceneChangeDialog","renderExportImportDialog","renderError","GenericApp","withWidth","buttonsContainer1","withTheme","getThemeName","build","ReactDOM","onThemeChange","_theme","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.2b32e4c4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nconst styles = theme => ({\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    buttonsContainer: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    width100: {\r\n        width: '100%'\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        paddingTop: 16,\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        paddingRight: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    editItem: {\r\n        display: 'block',\r\n        marginBottom: theme.spacing(2),\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    p: {\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    onTrue: {\r\n        background: 'lightgreen',\r\n    },\r\n    onFalse: {\r\n        background: '#ff9999',\r\n    },\r\n});\r\n\r\nclass SceneForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const sceneObj = props.scene ? JSON.parse(JSON.stringify(props.scene)) : {};\r\n\r\n        delete sceneObj.native.members;\r\n\r\n        this.state = {\r\n            common: sceneObj.common,\r\n            native: sceneObj.native,\r\n            showDialog: null,\r\n            sceneId: props.scene._id,\r\n        };\r\n\r\n        const inputs = ['Trigger', 'Value', 'Cron', 'Name', 'Description'];\r\n        this.inputs = {};\r\n        inputs.map(name => this.inputs[name] = {\r\n            ref:   React.createRef(),\r\n            start: 0,\r\n            end:   0,\r\n        });\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        const sceneObj = props.scene ? JSON.parse(JSON.stringify(props.scene)) : {};\r\n\r\n        delete sceneObj.native.members;\r\n\r\n        if (JSON.stringify(sceneObj.common) !== JSON.stringify(state.common) || JSON.stringify(sceneObj.native) !== JSON.stringify(state.native)) {\r\n            return {\r\n                common: sceneObj.common,\r\n                native: sceneObj.native,\r\n            };\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    setStateWithParent = (newState, cb) => {\r\n        this.setState(newState, () =>\r\n            this.props.updateScene(newState.common, newState.native, cb));\r\n    };\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialog ? <DialogSelectID\r\n                key=\"selectDialog\"\r\n                imagePrefix={'../..'}\r\n                socket={ this.props.socket }\r\n                dialogName=\"memberEdit\"\r\n                title={ I18n.t('Select for ') }\r\n                selected={ null }\r\n                onOk={ this.state.showDialog }\r\n                onClose={ () => this.setState({showDialog: false}) }\r\n            /> : null;\r\n    };\r\n\r\n    renderOnTrueFalse(name) {\r\n        const on = this.state.native[name];\r\n\r\n        return [\r\n            <div key=\"switch\" className={ this.props.classes.editItem }>\r\n                <h4>{ on === this.state.native.onTrue ? (this.state.native.onFalse.enabled ? I18n.t('Trigger for TRUE') : I18n.t('Trigger')) : I18n.t('Trigger for FALSE') }\r\n                    <span className={ this.props.classes.right }>\r\n                        <Switch checked={ !!on.trigger.id }\r\n                                onChange={ e => {\r\n                                    if (e.target.checked) {\r\n                                        this.setState({\r\n                                            showDialog: id => {\r\n                                                const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                                native[name].trigger.id = id;\r\n                                                native[name].trigger.condition = native[name].trigger.condition || '==';\r\n                                                this.setStateWithParent({native});\r\n                                            }\r\n                                        });\r\n                                    } else {\r\n                                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                        native[name].trigger.id = '';\r\n                                        this.setStateWithParent({native});\r\n                                    }\r\n                                } }\r\n                        />\r\n                    </span>\r\n                </h4>\r\n            </div>,\r\n            <div key=\"id\" className={ this.props.classes.editItem }>\r\n                {on.trigger.id ?\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={8}>\r\n                            <TextField\r\n                                inputRef={this.inputs.Trigger.ref}\r\n                                fullWidth\r\n                                InputLabelProps={ {shrink: true} }\r\n                                label={ I18n.t('Trigger ID') }\r\n                                value={ on.trigger.id }\r\n\r\n                                onFocus={() => this.saveCursorPosition('Trigger')}\r\n                                onKeyDown={() => this.saveCursorPosition('Trigger')}\r\n                                onChange={() => this.saveCursorPosition('Trigger')}\r\n\r\n                                onClick={ () => {\r\n                                    this.setState({\r\n                                        showDialog: id => {\r\n                                            const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                            native[name].trigger.id = id;\r\n                                            native[name].trigger.condition = native[name].trigger.condition || '==';\r\n                                            this.setStateWithParent({native});\r\n                                        }\r\n                                    });\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={2}>\r\n                            <FormControl>\r\n                                <InputLabel shrink={ true }>{ I18n.t('Condition') }</InputLabel>\r\n                                <Select value={ on.trigger.condition || '==' }\r\n                                        onChange={ e => {\r\n                                            const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                            native[name].trigger.condition = e.target.value;\r\n                                            this.setStateWithParent({native});\r\n                                        } }\r\n                                >\r\n                                    <MenuItem value=\"==\">==</MenuItem>\r\n                                    <MenuItem value=\"!=\">!=</MenuItem>\r\n                                    <MenuItem value=\">\">&gt;</MenuItem>\r\n                                    <MenuItem value=\"<\">&lt;</MenuItem>\r\n                                    <MenuItem value=\">=\">&gt;=</MenuItem>\r\n                                    <MenuItem value=\"<=\">&lt;=</MenuItem>\r\n                                    <MenuItem value=\"update\">{ I18n.t('on update') }</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n                            <TextField\r\n                                inputRef={this.inputs.Value.ref}\r\n                                fullWidth\r\n                                InputLabelProps= {{shrink: true} } label={ I18n.t('Value') }\r\n                                value={ on.trigger.value || '' }\r\n\r\n                                onFocus={() => this.saveCursorPosition('Value')}\r\n                                onKeyDown={() => this.saveCursorPosition('Value')}\r\n\r\n                                onChange={ e => {\r\n                                    this.saveCursorPosition('Value');\r\n                                    const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                    native[name].trigger.value = e.target.value;\r\n                                    this.setStateWithParent({native});\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    : null}\r\n            </div>,\r\n            <div key=\"cron\" className={ this.props.classes.editItem }>\r\n                <TextField\r\n                    inputRef={this.inputs.Cron.ref}\r\n                    fullWidth\r\n                    InputLabelProps={{shrink: true}}\r\n                    label={ name === 'onTrue' ? I18n.t('On time (CRON expression)') : I18n.t('Off time (CRON expression)')}\r\n                    value={ on.cron || '' }\r\n\r\n                    onFocus={() => this.saveCursorPosition('Cron')}\r\n                    onKeyDown={() => this.saveCursorPosition('Cron')}\r\n\r\n                    onChange={e => {\r\n                        this.saveCursorPosition('Cron');\r\n                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                        native[name].cron = e.target.value;\r\n                        this.setStateWithParent({native});\r\n                    }}\r\n                />\r\n            </div>\r\n        ];\r\n    }\r\n\r\n    saveCursorPosition = name => {\r\n        this.inputs[name].start = this.inputs[name].ref.current.selectionStart;\r\n        this.inputs[name].end   = this.inputs[name].ref.current.selectionEnd;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // If there was a request to update the selection via setState...\r\n        // Update the selection.\r\n        Object.keys(this.inputs).forEach(name => {\r\n            if (this.inputs[name].ref.current) {\r\n                if (this.inputs[name].ref.current.selectionStart !== this.inputs[name].start) {\r\n                    this.inputs[name].ref.current.selectionStart = this.inputs[name].start;\r\n                }\r\n                if (this.inputs[name].ref.current.selectionEnd   !== this.inputs[name].end) {\r\n                    this.inputs[name].ref.current.selectionEnd   = this.inputs[name].end;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let result = <Box key=\"sceneForm\" className={ clsx(this.props.classes.columnContainer, !this.props.oneColumn && this.props.classes.height) }>\r\n            <Box className={ this.props.classes.scroll }>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <TextField\r\n                        inputRef={this.inputs.Name.ref}\r\n                        fullWidth\r\n                        InputLabelProps={ {shrink: true} }\r\n                        label={ I18n.t('Scene name') }\r\n                        value={ this.state.common.name }\r\n\r\n                        onFocus={() => this.saveCursorPosition('Name')}\r\n                        onKeyDown={() => this.saveCursorPosition('Name')}\r\n\r\n                        onChange={ e => {\r\n                            this.saveCursorPosition('Name');\r\n                            const common = JSON.parse(JSON.stringify(this.state.common));\r\n                            common.name = e.target.value;\r\n                            this.setStateWithParent({common});\r\n                        }}/>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <TextField\r\n                        inputRef={this.inputs.Description.ref}\r\n                        fullWidth\r\n                        InputLabelProps={ {shrink: true} }\r\n                        label={ I18n.t('Scene description') }\r\n                        value={ this.state.common.desc }\r\n\r\n                        onFocus={() => this.saveCursorPosition('Description')}\r\n                        onKeyDown={() => this.saveCursorPosition('Description')}\r\n\r\n                        onChange={ e => {\r\n                            this.saveCursorPosition('Description');\r\n                            const common = JSON.parse(JSON.stringify(this.state.common));\r\n                            common.desc = e.target.value;\r\n                            this.setStateWithParent({common});\r\n                        }}\r\n                    />\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <Grid container spacing={ 1 }>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <FormControl className={this.props.classes.width100}>\r\n                                <InputLabel shrink={true}>{ I18n.t('Instance') }</InputLabel>\r\n                                <Select\r\n                                    value={ this.state.common.engine }\r\n                                    onChange={e => {\r\n                                        const common = JSON.parse(JSON.stringify(this.state.common));\r\n                                        common.engine = e.target.value;\r\n                                        this.setStateWithParent({common});\r\n                                    }}\r\n                                >\r\n                                    { this.props.instances.map(id => <MenuItem key={ id } value={ id }>{ id.replace('system.adapter.', '') }</MenuItem>) }\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={ {shrink: true} }\r\n                                label={ I18n.t('Interval between commands') }\r\n                                min={ 0 }\r\n                                value={ this.state.native.burstInterval || 0 }\r\n                                helperText=\"ms\"\r\n                                type=\"number\"\r\n                                onChange={e => {\r\n                                    const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                    native.burstInterval = parseInt(e.target.value, 10);\r\n                                    this.setStateWithParent({native});\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <FormControlLabel\r\n                                style={{paddingTop: 10}}\r\n                                title={ I18n.t('virtual_group_tooltip') }\r\n                                label={ I18n.t('Virtual group') } control={\r\n                                <Checkbox\r\n                                    checked={this.state.native.virtualGroup}\r\n                                      onChange={e => {\r\n                                          const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                          native.virtualGroup = e.target.checked;\r\n                                          this.setStateWithParent({native});\r\n                                      }}\r\n                                />\r\n                            }/>\r\n                        </Grid>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            { !this.state.native.virtualGroup ?\r\n                                <FormControlLabel\r\n                                    style={{paddingTop: 10}}\r\n                                    label={I18n.t('Set value if false')}\r\n                                    control={\r\n                                          <Checkbox\r\n                                              checked={ this.state.native.onFalse.enabled }\r\n                                                onChange={e => {\r\n                                                    const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                                    native.onFalse.enabled = e.target.checked;\r\n                                                    this.setStateWithParent({native});\r\n                                                }}\r\n                                          />}\r\n                                />\r\n                                : null }\r\n                            { this.state.native.virtualGroup && !this.state.native.easy ?\r\n\t                            <FormControl className={this.props.classes.width100}>\r\n\t                                <InputLabel shrink={true}>{ I18n.t('Aggregation') }</InputLabel>\r\n\t                                <Select\r\n\t                                    value={ this.state.native.aggregation || 'uncertain' }\r\n\t                                    onChange={e => {\r\n\t                                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n\t                                        native.aggregation = e.target.value;\r\n\t                                        this.setStateWithParent({native});\r\n\t                                    }}\r\n\t                                >\r\n\t                                    { ['uncertain', 'any', 'avg', 'min', 'max']\r\n                                            .map(id => <MenuItem key={ id } value={ id }>{ id }</MenuItem>) }\r\n\t                                </Select>\r\n\t                            </FormControl>\r\n                                : null }\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <FormControlLabel\r\n                                style={{paddingTop: 10}}\r\n                                label={ I18n.t('Easy mode') } control={\r\n                                <Checkbox\r\n                                    checked={this.state.native.easy}\r\n                                      onChange={e => {\r\n                                          const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                          native.easy = e.target.checked;\r\n                                          this.setStateWithParent({native});\r\n                                      }}\r\n                                />\r\n                            }/>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                { !this.state.native.virtualGroup ? this.renderOnTrueFalse('onTrue') : null }\r\n                { !this.state.native.virtualGroup && this.state.native.onFalse.enabled ? this.renderOnTrueFalse('onFalse') : null }\r\n            </Box>\r\n        </Box>;\r\n        return [\r\n            result,\r\n            this.renderSelectIdDialog()\r\n        ];\r\n    }\r\n}\r\n\r\nSceneForm.propTypes = {\r\n    classes: PropTypes.object,\r\n    socket: PropTypes.object,\r\n    scene: PropTypes.object,\r\n    updateScene: PropTypes.func.isRequired,\r\n    instances: PropTypes.array,\r\n    oneColumn: PropTypes.bool,\r\n    showError: PropTypes.func,\r\n};\r\n\r\nexport default withStyles(styles)(SceneForm);","import React from 'react'\r\nimport clsx from 'clsx'\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\n\r\n// own components\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\n// icons\r\nimport {AiOutlineClockCircle as IconClock} from 'react-icons/ai';\r\nimport {MdDelete as IconDelete} from 'react-icons/md';\r\nimport {MdAdd as IconAdd} from 'react-icons/md';\r\nimport {MdPlayArrow as IconPlay} from 'react-icons/md';\r\nimport {FaFolder as IconFolderClosed} from 'react-icons/fa';\r\nimport {FaFolderOpen as IconFolderOpened} from 'react-icons/fa';\r\nimport ClearIcon from '@material-ui/icons/Close';\r\nimport IconCancel from '@material-ui/icons/Close';\r\nimport IconExpandAll from '@material-ui/icons/ExpandMore';\r\nimport IconCollapseAll from '@material-ui/icons/ExpandLess';\r\nimport ListIcon from '@material-ui/icons/Menu';\r\n\r\nconst TRUE_COLOR       = '#90ee90';\r\nconst FALSE_COLOR      = '#ff9999';\r\nconst TRUE_DARK_COLOR  = '#528952';\r\nconst FALSE_DARK_COLOR = '#774747';\r\nconst UNCERTAIN_COLOR  = '#bfb7be';\r\n\r\nconst styles = theme => ({\r\n    memberTrueFalse: {\r\n        borderRadius: 10,\r\n        padding: '2px ' + theme.spacing(1) + 'px',\r\n        fontSize: 'initial',\r\n        fontWeight: 'initial',\r\n        margin: '0 ' + theme.spacing(1) + 'px',\r\n        textAlign: 'right',\r\n        whiteSpace: 'nowrap',\r\n        maxWidth: 300,\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n    },\r\n    memberTrue: {\r\n        backgroundColor: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n    },\r\n    memberFalse: {\r\n        backgroundColor: 'pink',\r\n    },\r\n    memberUncertain: {\r\n        color: '#FFF',\r\n        backgroundColor: '#808080',\r\n    },\r\n    memberCard: {\r\n        padding: 4,\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    memberFolder: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        paddingRight: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    buttonsContainer: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    p: {\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    guttersZero: {\r\n        padding: 0,\r\n    },\r\n    sceneTitle: {\r\n        flexGrow: 1,\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    sceneSubTitle: {\r\n        fontSize: 'small',\r\n        borderRadius: 10,\r\n        padding: `2px ${theme.spacing(1)}px`,\r\n    },\r\n    sceneTrue: {\r\n        background: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n    },\r\n    sceneFalse: {\r\n        background: theme.palette.type === 'dark' ? FALSE_DARK_COLOR : FALSE_COLOR,\r\n    },\r\n    sceneUncertain: {\r\n        background: UNCERTAIN_COLOR,\r\n    },\r\n    btnTestTrue: {\r\n        background: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n        marginRight: theme.spacing(1),\r\n        marginBottom: theme.spacing(0.5),\r\n    },\r\n    btnTestFalse: {\r\n        background: theme.palette.type === 'dark' ? FALSE_DARK_COLOR : FALSE_COLOR,\r\n        marginBottom: theme.spacing(0.5),\r\n    },\r\n    btnExpandAll: {\r\n        float: 'right'\r\n    },\r\n    btnCollapseAll: {\r\n        float: 'right'\r\n    },\r\n    smallOnTrueFalse: {\r\n        fontSize: 'small',\r\n        textAlign: 'right',\r\n        width: '100%',\r\n        display: 'inline-block',\r\n    },\r\n    stateValueTrue: {\r\n        color: '#60a060',\r\n        fontWeight: 'bold',\r\n    },\r\n    stateValueFalse: {\r\n        color: '#c15454',\r\n        fontWeight: 'bold',\r\n    },\r\n    changed: {\r\n        position: 'relative',\r\n        '&:after': {\r\n            content: '\"\"',\r\n            width: 6,\r\n            height: 6,\r\n            borderRadius: 6,\r\n            background: '#FF0000',\r\n            position: 'absolute',\r\n            top: 5,\r\n            right: 5,\r\n        },\r\n    },\r\n    memberDesc: {\r\n        display: 'inline-block',\r\n        fontSize: 10,\r\n        fontStyle: 'italic',\r\n        marginLeft: 50,\r\n    },\r\n    memberTitle: {\r\n        fontSize: 14,\r\n        fontWeight: 'bold',\r\n        marginLeft: 50,\r\n    },\r\n    memberToolbar: {\r\n        width: '100%',\r\n        position: 'relative',\r\n        minHeight: 72,\r\n    },\r\n    memberButtons: {\r\n        textAlign: 'right',\r\n        position: 'absolute',\r\n        top: 2,\r\n        right: 2,\r\n    },\r\n    width100WithButton: {\r\n        width: 'calc(100% - 48px)',\r\n    },\r\n    width100: {\r\n        width: '100%',\r\n    },\r\n    testButtons: {\r\n        minHeight: 48,\r\n    },\r\n    setValue: {\r\n        width: 'calc(70% - ' + (70 + theme.spacing(1)) + 'px)',\r\n        minWidth: 100,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    setTolerance: {\r\n        width: 'calc(30% - ' + (70 + theme.spacing(1)) + 'px)',\r\n        minWidth: 100,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    disabled: {\r\n        opacity: 0.3\r\n    },\r\n    instanceNotActive: {\r\n        marginLeft: theme.spacing(1),\r\n        fontSize: 10,\r\n        fontStyle: 'italic',\r\n        color: '#FF0000',\r\n    },\r\n    fromId: {\r\n        marginTop: 8,\r\n    },\r\n});\r\n\r\nclass SceneMembersForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let openedMembers = window.localStorage.getItem('Scenes.openedMembers') || '[]';\r\n        try {\r\n            openedMembers = JSON.parse(openedMembers);\r\n        } catch (e) {\r\n            openedMembers = [];\r\n        }\r\n\r\n        this.state = {\r\n            states: {},\r\n            openedMembers,\r\n            objectTypes: {},\r\n            objectNames: {},\r\n            members: JSON.parse(JSON.stringify(props.members)),\r\n            easy: props.easy,\r\n            writeSceneState: '',\r\n            deleteDialog: null,\r\n            onFalseEnabled: props.onFalseEnabled,\r\n            virtualGroup: props.virtualGroup,\r\n            aggregation: props.aggregation,\r\n            sceneEnabled: props.sceneEnabled,\r\n            selectedSceneChanged: props.selectedSceneChanged,\r\n            engineId: props.engineId,\r\n            suppressDeleteConfirm: false,\r\n            showSelectValueIdDialog: false,\r\n            showSelectValueIdDialogFor: null,\r\n        };\r\n\r\n        this.delButtonRef = React.createRef();\r\n\r\n        this.engineId = this.state.engineId;\r\n\r\n        this.onDragEnd = this.onDragEnd.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.readObjects()\r\n            .then(newState =>\r\n                this.setState(newState, () => {\r\n                    // subscribe on scene state\r\n                    this.props.socket.subscribeState(this.props.sceneId, this.memberStateChange);\r\n                    this.state.engineId && this.props.socket.subscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n\r\n                    // subscribe on all states\r\n                    this.state.members.forEach(member =>\r\n                        member.id && this.props.socket.subscribeState(member.id, this.memberStateChange))\r\n                }));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.socket.unsubscribeState(this.props.sceneId, this.memberStateChange);\r\n        this.state.engineId && this.props.socket.unsubscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n\r\n        this.state.members.forEach(member =>\r\n            this.props.socket.unsubscribeState(member.id, this.memberStateChange));\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        const newState = {};\r\n        let changed = false;\r\n\r\n        if (props.onFalseEnabled !== state.onFalseEnabled) {\r\n            newState.onFalseEnabled = props.onFalseEnabled;\r\n            changed = true;\r\n        }\r\n        if (props.virtualGroup !== state.virtualGroup) {\r\n            newState.virtualGroup = props.virtualGroup;\r\n            changed = true;\r\n        }\r\n        if (props.aggregation !== state.aggregation) {\r\n            newState.aggregation = props.aggregation;\r\n            changed = true;\r\n        }\r\n        if (props.selectedSceneChanged !== state.selectedSceneChanged) {\r\n            newState.selectedSceneChanged = props.selectedSceneChanged;\r\n            changed = true;\r\n        }\r\n        if (props.sceneEnabled !== state.sceneEnabled) {\r\n            newState.sceneEnabled = props.sceneEnabled;\r\n            changed = true;\r\n        }\r\n        if (props.engineId !== state.engineId) {\r\n            newState.engineId = props.engineId;\r\n            changed = true;\r\n        }\r\n        if (props.easy !== state.easy) {\r\n            newState.easy = props.easy;\r\n            changed = true;\r\n        }\r\n\r\n        return changed ? newState : null;\r\n    }\r\n\r\n    onDragEnd(result) {\r\n        // dropped outside the list\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n        const members = JSON.parse(JSON.stringify(this.state.members));\r\n        const [removed] = members.splice(result.source.index, 1);\r\n        members.splice(result.destination.index, 0, removed);\r\n\r\n        this.setStateWithParent({members});\r\n    }\r\n\r\n    readObjects() {\r\n        if (this.state.members) {\r\n            return Promise.all(\r\n                this.state.members.map(member =>\r\n                    this.props.socket.getObject(member.id)))\r\n                .then(results => {\r\n                    const objectTypes = {};\r\n                    const objectNames = {};\r\n                    results.forEach(obj => {\r\n                        if (obj && obj.common && obj.common.type) {\r\n                            objectTypes[obj._id] = obj.common.type;\r\n                            objectNames[obj._id] = Utils.getObjectNameFromObj(obj, null, {language: I18n.getLanguage()}, false);\r\n                        }\r\n                    });\r\n\r\n                    return {objectTypes, objectNames};\r\n                })\r\n                .catch(e => this.props.showError(e));\r\n        } else {\r\n            return Promise.resolve({});\r\n        }\r\n    }\r\n\r\n    memberStateChange = (id, state) => {\r\n        const states = JSON.parse(JSON.stringify(this.state.states));\r\n        states[id] = state ? state.val : null;\r\n        const objectTypes = JSON.parse(JSON.stringify(this.state.objectTypes));\r\n\r\n        if (!objectTypes[id] && states[id] !== null && states[id] !== undefined) {\r\n            objectTypes[id] = typeof states[id];\r\n        }\r\n\r\n        if (objectTypes[id] === 'boolean') {\r\n            if (states[id] === 'true') {\r\n                states[id] = true;\r\n            }\r\n            if (states[id] === 'false') {\r\n                states[id] = false;\r\n            }\r\n        } else if (objectTypes[id] === 'number') {\r\n            states[id] = parseFloat(states[id]);\r\n        }\r\n\r\n        this.setState({states, objectTypes});\r\n    };\r\n\r\n    createSceneMembers = ids => {\r\n        this.setState({showDialog: false}, () => {\r\n            if (ids.length) {\r\n                const openedMembers = [...this.state.openedMembers];\r\n                const objectTypes = JSON.parse(JSON.stringify(this.state.objectTypes));\r\n                const objectNames = JSON.parse(JSON.stringify(this.state.objectNames));\r\n                const members     = JSON.parse(JSON.stringify(this.state.members));\r\n\r\n                Promise.all(ids.map(id =>\r\n                    // Read type of state\r\n                    this.props.socket.getObject(id)\r\n                        .then(obj => {\r\n                            if (!obj) {\r\n                                return;\r\n                            }\r\n\r\n                            const template = {\r\n                                id,\r\n                                setIfTrue: null,\r\n                                setIfFalse: null,\r\n                                stopAllDelays: true,\r\n                                desc: null,\r\n                                disabled: false,\r\n                                delay: 0\r\n                            };\r\n\r\n                            if (obj) {\r\n                                objectNames[obj._id] = Utils.getObjectNameFromObj(obj, null, {language: I18n.getLanguage()}, true);\r\n                            }\r\n\r\n\r\n                            if (obj && obj.common && obj.common.type) {\r\n                                objectTypes[id] = obj.common.type;\r\n\r\n                                if (objectTypes[id] === 'boolean') {\r\n                                    template.setIfTrue = true;\r\n                                    if (this.state.onFalseEnabled) {\r\n                                        template.setIfFalse = false;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            members.push(template);\r\n\r\n                            // open added state\r\n                            openedMembers.push(id);\r\n                        })\r\n                        .then(() => this.setStateWithParent({objectTypes, objectNames, members, openedMembers}, () =>\r\n                            // Subscribe on all new members\r\n                            ids.forEach(id => this.props.socket.subscribeState(id, this.memberStateChange)))\r\n                        )\r\n                    )\r\n                )\r\n                    .catch(e => this.props.showError(e));\r\n            } else {\r\n                // Show alert\r\n                this.props.showError(I18n.t('Unknown error!'));\r\n            }\r\n        });\r\n    };\r\n\r\n    deleteSceneMember = id => {\r\n        let members = JSON.parse(JSON.stringify(this.state.members));\r\n\r\n        for (let i = 0; i < members.length; i++) {\r\n            if (members[i].id === id) {\r\n                members.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        this.setStateWithParent({members, deleteDialog: null}, () =>\r\n            this.props.socket.unsubscribeState(id, this.memberStateChange));\r\n    };\r\n\r\n    setStateWithParent(newState, cb) {\r\n        const that = this;\r\n        this.setState(newState, () =>\r\n            this.props.updateSceneMembers(that.state.members, cb));\r\n    };\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialog ? <DialogSelectID\r\n            imagePrefix={'../..'}\r\n            key=\"selectDialogMembers\"\r\n            socket={ this.props.socket }\r\n            dialogName=\"memberEdit\"\r\n            multiSelect={ true }\r\n            title={ I18n.t('Select for ') }\r\n            selected={ null }\r\n            onOk={ id => this.createSceneMembers(id) }\r\n            onClose={ () => this.setState({showDialog: false}) }\r\n        /> : null;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        this.state.deleteDialog && setTimeout(() => {\r\n            if (this.delButtonRef.current) {\r\n                this.delButtonRef.current.focus();\r\n            }\r\n        }, 50);\r\n    }\r\n\r\n    renderDeleteDialog() {\r\n        if (this.state.deleteDialog === null) {\r\n            return;\r\n        }\r\n\r\n        return <Dialog\r\n            open={ true }\r\n            key=\"deleteDialog\"\r\n            onClose={ () =>\r\n                this.setState({deleteDialog: null}) }\r\n            >\r\n                <DialogTitle>{ I18n.t('Are you sure for delete this state?') }</DialogTitle>\r\n                <DialogContent>\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={this.state.suppressDeleteConfirm} onChange={() => this.setState({suppressDeleteConfirm: !this.state.suppressDeleteConfirm})} />}\r\n                        label={I18n.t('Suppress confirmation for next 5 minutes')}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        ref={this.delButtonRef}\r\n                        onClick={ e => {\r\n                            if (this.state.suppressDeleteConfirm) {\r\n                                window.localStorage.setItem('scenes.suppressDeleteConfirm', Date.now().toString());\r\n                            }\r\n                            this.deleteSceneMember(this.state.deleteDialog);\r\n                        } }\r\n                        startIcon={<IconDelete />}\r\n                    >\r\n                        { I18n.t('Delete') }\r\n                    </Button>\r\n                    <Button\r\n                        autoFocus\r\n                        variant=\"contained\"\r\n                        onClick={ () => this.setState({deleteDialog: null}) }\r\n                        startIcon={<IconCancel />}\r\n                    >\r\n                        {I18n.t('Cancel')}\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>;\r\n    };\r\n\r\n    renderSelectStateIdDialog() {\r\n        if (!this.state.showSelectValueIdDialog) {\r\n            return null;\r\n        } else {\r\n            let setValue;\r\n            if (this.state.showSelectValueIdDialog === 'true') {\r\n                setValue = this.state.members[this.state.showSelectValueIdDialogFor].setIfTrue;\r\n            } else {\r\n                setValue = this.state.members[this.state.showSelectValueIdDialogFor].setIfFalse;\r\n            }\r\n            const m = typeof setValue === 'string' && setValue.match(/^{{([^}]*)}}$/);\r\n            if (m) {\r\n                setValue = m[1];\r\n            }\r\n\r\n            return <DialogSelectID\r\n                imagePrefix={'../..'}\r\n                key=\"selectDialogMember\"\r\n                socket={ this.props.socket }\r\n                dialogName=\"memberEdit\"\r\n                multiSelect={ false }\r\n                title={ I18n.t('Select for ') + (this.state.showSelectValueIdDialog === 'true' ? 'TRUE' : 'FALSE') }\r\n                selected={ setValue }\r\n                onOk={ id => {\r\n                    if (id) {\r\n                        const index = this.state.showSelectValueIdDialogFor;\r\n                        const members = JSON.parse(JSON.stringify(this.state.members));\r\n                        if (this.state.showSelectValueIdDialog === 'true') {\r\n                            members[index].setIfTrue = '{{' + id + '}}';\r\n                        } else {\r\n                            members[index].setIfFalse = '{{' + id + '}}';\r\n                        }\r\n\r\n                        this.setState({showSelectValueIdDialog: false, showSelectValueIdDialogFor: null}, () =>\r\n                            this.setStateWithParent({members}));\r\n                    }\r\n                }}\r\n                onClose={ () => this.setState({showSelectValueIdDialog: false, showSelectValueIdDialogFor: null}) }\r\n            />;\r\n        }\r\n    }\r\n\r\n    renderSetValue(classes, index, member, onFalseEnabled, isTrue) {\r\n        let labelSetValue;\r\n        let labelTolerance;\r\n        let setValue;\r\n        let setValueTolerance;\r\n        if (isTrue) {\r\n            setValue = member.setIfTrue;\r\n        } else {\r\n            setValue = member.setIfFalse;\r\n        }\r\n\r\n        const m = typeof setValue === 'string' && setValue.match(/^{{([^}]*)}}$/);\r\n        let fromState = false;\r\n        if (m) {\r\n            setValue = m[1];\r\n            fromState = true;\r\n        }\r\n\r\n        if (isTrue) {\r\n            if (fromState) {\r\n                labelSetValue = onFalseEnabled ? I18n.t('From ID by TRUE') : I18n.t('From ID');\r\n            } else {\r\n                labelSetValue = onFalseEnabled ? I18n.t('Setpoint by TRUE') : I18n.t('Setpoint');\r\n            }\r\n            labelTolerance = (onFalseEnabled ? I18n.t('Tolerance by TRUE') : I18n.t('Tolerance'));\r\n            setValueTolerance = member.setIfTrueTolerance;\r\n        } else {\r\n            labelSetValue = fromState ? I18n.t('From ID by FALSE') :I18n.t('Setpoint by FALSE');\r\n            labelTolerance = I18n.t('Tolerance by FALSE');\r\n            setValueTolerance = member.setIfFalseTolerance;\r\n        }\r\n\r\n\r\n        return <Box className={ classes.p }>\r\n            {!this.state.easy || fromState ? <FormControlLabel\r\n                classes={{root: classes.fromId}}\r\n                control={\r\n                    <Switch\r\n                        checked={fromState}\r\n                        onChange={e => {\r\n                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                            if (e.target.checked) {\r\n                                if (isTrue) {\r\n                                    members[index].setIfTrue = '{{}}';\r\n                                } else {\r\n                                    members[index].setIfFalse = '{{}}';\r\n                                }\r\n                            } else {\r\n                                if (isTrue) {\r\n                                    members[index].setIfTrue = null;\r\n                                } else {\r\n                                    members[index].setIfFalse = null;\r\n                                }\r\n                            }\r\n                            this.setStateWithParent({members});\r\n                        }}\r\n                    />\r\n                }\r\n                label=\"From ID\"\r\n            /> : null }\r\n            { !fromState && this.state.objectTypes[member.id] === 'boolean' ?\r\n                <FormControl className={ classes.setValue }>\r\n                    <InputLabel>{ labelSetValue }</InputLabel>\r\n                    <Select\r\n                        value={ setValue === true || setValue === 'true' ? 'true' : (setValue === false || setValue === 'false' ? 'false' : 'null')}\r\n                        onChange={ e => {\r\n                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                            if (isTrue) {\r\n                                members[index].setIfTrue = e.target.value === 'true' ? true : (e.target.value === 'false' ? false : null);\r\n                            } else {\r\n                                members[index].setIfFalse = e.target.value === 'true' ? true : (e.target.value === 'false' ? false : null);\r\n                            }\r\n\r\n                            this.setStateWithParent({members});\r\n                        } }\r\n                    >\r\n                        <MenuItem value=\"false\">FALSE</MenuItem>\r\n                        <MenuItem value=\"true\">TRUE</MenuItem>\r\n                        <MenuItem value=\"null\">{I18n.t('NOT CHANGE')}</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n                :\r\n                <React.Fragment>\r\n                    {fromState ?\r\n                        <TextField\r\n                            fullWidth\r\n                            InputLabelProps={{shrink: true}}\r\n                            label={labelSetValue}\r\n                            value={setValue || ''}\r\n                            readOnly\r\n                            className={classes.setValue}\r\n                            InputProps={{\r\n                                endAdornment:\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => this.setState({showSelectValueIdDialog: isTrue ? 'true' : 'false', showSelectValueIdDialogFor: index})}>\r\n                                        <ListIcon/>\r\n                                    </IconButton>,\r\n                            }}\r\n                        />\r\n                        :\r\n                        <TextField\r\n                            fullWidth\r\n                            InputLabelProps={{shrink: true}}\r\n                            label={labelSetValue}\r\n                            value={setValue === undefined || setValue === null ? '' : setValue}\r\n                            className={classes.setValue}\r\n                            InputProps={{\r\n                                endAdornment: setValue ?\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            if (isTrue) {\r\n                                                members[index].setIfTrue = null;\r\n                                            } else {\r\n                                                members[index].setIfFalse = null;\r\n                                            }\r\n                                            this.setStateWithParent({members});\r\n                                        }}>\r\n                                        <ClearIcon/>\r\n                                    </IconButton>\r\n                                    : undefined,\r\n                            }}\r\n                            onChange={e => {\r\n                                const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                if (this.state.objectTypes[member.id] === 'number') {\r\n                                    if (isTrue) {\r\n                                        members[index].setIfTrue = parseFloat(e.target.value.replace(',', '.'));\r\n                                    } else {\r\n                                        members[index].setIfFalse = parseFloat(e.target.value.replace(',', '.'));\r\n                                    }\r\n                                } else {\r\n                                    if (isTrue) {\r\n                                        members[index].setIfTrue = e.target.value;\r\n                                    } else {\r\n                                        members[index].setIfFalse = e.target.value;\r\n                                    }\r\n                                }\r\n\r\n                                this.setStateWithParent({members});\r\n                            }}\r\n                        />\r\n                    }\r\n\r\n                    {!this.state.easy && this.state.objectTypes[member.id] !== 'boolean' ? <TextField\r\n                        InputLabelProps={ {shrink: true} }\r\n                        label={ '± ' + labelTolerance }\r\n                        value={ setValueTolerance === undefined || setValueTolerance === null ? '' : setValueTolerance }\r\n                        title={ I18n.t('Absolute value, not percent') }\r\n                        className={ classes.setTolerance }\r\n                        InputProps={{\r\n                            endAdornment: setValueTolerance ?\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => {\r\n                                        const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                        if (isTrue) {\r\n                                            members[index].setIfTrueTolerance = null;\r\n                                        } else {\r\n                                            members[index].setIfFalseTolerance = null;\r\n                                        }\r\n                                        this.setStateWithParent({members});\r\n                                    }}>\r\n                                    <ClearIcon />\r\n                                </IconButton>\r\n                                : undefined,\r\n                        }}\r\n                        onChange={ e => {\r\n                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                            if (isTrue) {\r\n                                members[index].setIfTrueTolerance = e.target.value === '' ? '' : parseFloat(e.target.value.replace(',', '.'));\r\n                            } else {\r\n                                members[index].setIfFalseTolerance = e.target.value === '' ? '' : parseFloat(e.target.value.replace(',', '.'));\r\n                            }\r\n                            this.setStateWithParent({members});\r\n                        } }/> : null}\r\n                </React.Fragment>\r\n            }\r\n        </Box>;\r\n    }\r\n\r\n    renderMember = (member, index) => {\r\n        let value = null;\r\n        const classes = this.props.classes;\r\n        if (this.state.states[member.id] !== undefined && this.state.states[member.id] !== null) {\r\n            let _valStr = this.state.states[member.id].toString();\r\n\r\n            if (_valStr === 'true') {\r\n                _valStr = 'TRUE';\r\n            } else if (_valStr === 'false') {\r\n                _valStr = 'FALSE';\r\n            }\r\n\r\n            if (member.setIfTrueTolerance && Math.abs(this.state.states[member.id] - member.setIfTrue) <= member.setIfTrueTolerance) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberTrue) }>{ _valStr }</div>;\r\n            } else if (this.state.states[member.id] === member.setIfTrue) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberTrue) }>{ _valStr }</div>;\r\n            } else if (member.setIfFalse !== undefined && member.setIfFalseTolerance && Math.abs(this.state.states[member.id] - member.setIfFalse) <= member.setIfFalseTolerance) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberFalse) }>{ _valStr }</div>;\r\n            } else if (member.setIfFalse !== undefined && this.state.states[member.id] === member.setIfFalse) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberFalse) }>{ _valStr }</div>;\r\n            } else {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberUncertain) }>{ _valStr }</div>;\r\n            }\r\n        }\r\n\r\n        const opened = this.state.openedMembers.includes(member.id);\r\n        const onFalseEnabled = !this.state.virtualGroup && this.state.onFalseEnabled;\r\n        let setIfTrueVisible = true;\r\n\r\n        let setIfTrue = member.setIfTrue;\r\n        if (setIfTrue === undefined || setIfTrue === null) {\r\n            setIfTrue = '';\r\n            setIfTrueVisible = false;\r\n        } else {\r\n            if (setIfTrue === true) {\r\n                setIfTrue = 'TRUE';\r\n            } else if (setIfTrue === false) {\r\n                setIfTrue = 'FALSE';\r\n            } else {\r\n                if (member.setIfTrueTolerance) {\r\n                    setIfTrue = setIfTrue + '±' + member.setIfTrueTolerance;\r\n                } else {\r\n                    setIfTrue = setIfTrue.toString();\r\n                }\r\n            }\r\n        }\r\n\r\n        const varType =  this.state.objectTypes[member.id];\r\n\r\n        if (onFalseEnabled && setIfTrueVisible && setIfTrue === '' && (varType === 'number' || varType === 'boolean')) {\r\n            setIfTrueVisible = false;\r\n        }\r\n\r\n        let setIfFalse = member.setIfFalse;\r\n        let setIfFalseVisible = onFalseEnabled;\r\n        if (setIfFalse === undefined || setIfFalse === null) {\r\n            setIfFalse = '';\r\n            setIfFalseVisible = false;\r\n        } else {\r\n            if (setIfFalse === true) {\r\n                setIfFalse = 'TRUE';\r\n            } else if (setIfFalse === false) {\r\n                setIfFalse = 'FALSE';\r\n            } else {\r\n                if (member.setIfFalseTolerance) {\r\n                    setIfFalse = setIfFalse + '±' + member.setIfFalseTolerance;\r\n                } else {\r\n                    setIfFalse = setIfFalse.toString();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (setIfFalseVisible && setIfFalse === '' && (varType === 'number' || varType === 'boolean')) {\r\n            setIfFalseVisible = false;\r\n        }\r\n\r\n        // calculate enabled states\r\n        let delay = 0;\r\n        let stacked = false;\r\n        for (let u = 0; u < index; u++) {\r\n            if (!this.state.members[u].disabled) {\r\n                if (this.state.members[u].stackNextDelays) {\r\n                    stacked = true;\r\n                }\r\n                if (stacked) {\r\n                    delay += (this.state.members[u].delay || 0);\r\n                }\r\n                delay += this.props.intervalBetweenCommands;\r\n            }\r\n        }\r\n\r\n        delay += (member.delay || 0);\r\n\r\n        return <Paper key={ member.id + '_' + index } className={ clsx(classes.memberCard, member.disabled && classes.disabled) }>\r\n            <div className={ classes.memberToolbar }>\r\n                <IconButton className={ classes.memberFolder} title={ I18n.t('Edit') } onClick={ () => {\r\n                    const openedMembers = [...this.state.openedMembers];\r\n                    const pos = openedMembers.indexOf(member.id);\r\n                    if (pos !== -1) {\r\n                        openedMembers.splice(pos, 1);\r\n                    } else {\r\n                        openedMembers.push(member.id);\r\n                        openedMembers.sort();\r\n                    }\r\n                    window.localStorage.setItem('Scenes.openedMembers', JSON.stringify(openedMembers));\r\n                    this.setState({openedMembers});\r\n                }}>\r\n                    { opened ? <IconFolderOpened/> : <IconFolderClosed/> }\r\n                </IconButton>\r\n                <div className={ classes.memberTitle }>{ member.id }</div>\r\n                <div className={ classes.memberDesc }>{ member.desc || this.state.objectNames[member.id] || '' }</div>\r\n                <div className={ classes.memberButtons }>\r\n                    <IconButton\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 5 }} aria-label=\"Delete\" title={I18n.t('Delete')}\r\n                        onClick={ () => {\r\n                            const suppressDeleteConfirm = window.localStorage.getItem('scenes.suppressDeleteConfirm');\r\n                            if (suppressDeleteConfirm) {\r\n                                if (Date.now() - parseInt(suppressDeleteConfirm, 10) < 300000) {\r\n                                    this.deleteSceneMember(member.id);\r\n                                } else {\r\n                                    window.localStorage.removeItem('scenes.suppressDeleteConfirm');\r\n                                    this.setState({deleteDialog: member.id});\r\n                                }\r\n                            } else {\r\n                                this.setState({deleteDialog: member.id, suppressDeleteConfirm: false});\r\n                            }\r\n                        } }>\r\n                        <IconDelete/>\r\n                    </IconButton>\r\n                    <Switch\r\n                        checked={ !member.disabled }\r\n                        onChange={ e => {\r\n                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                            members[index].disabled = !e.target.checked;\r\n                            this.setStateWithParent({members});\r\n                        }}\r\n                        name={ member.id }\r\n                    />\r\n                    { value }\r\n                </div>\r\n            </div>\r\n            <div>{ member.desc } { !member.disabled && (this.props.intervalBetweenCommands || member.delay) ?\r\n                <span> <IconClock/> { delay + I18n.t('ms') + ' ' + I18n.t('from scene start')}</span> : null }\r\n            </div>\r\n            {\r\n                opened ?\r\n                    <div>\r\n                        {/*<Box className={classes.p}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={{shrink: true}} label={I18n.t('Description')}\r\n                                value={member.desc || ''}\r\n                                onChange={e => {\r\n                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                    members[index].desc = e.target.value;\r\n                                    this.setStateWithParent({members});\r\n                                }}\r\n                            />\r\n                        </Box>*/ }\r\n                        { !this.state.virtualGroup ? this.renderSetValue(classes, index, member, onFalseEnabled, true) : null }\r\n                        { !this.state.virtualGroup && this.state.onFalseEnabled ? this.renderSetValue(classes, index, member, true, false) : null}\r\n                        {!this.state.easy ?\r\n                            <Box className={classes.p}>\r\n                                <Grid container spacing={4}>\r\n                                    <Grid item xs={12} sm={4}>\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            InputLabelProps={{shrink: true}}\r\n                                            label={I18n.t('Delay (ms)')}\r\n                                            title={I18n.t(\r\n                                                'Additionally to the interval between commands. E.g. if the interval %s, this state will be set after %s ms from scene start',\r\n                                                this.props.intervalBetweenCommands,\r\n                                                this.props.intervalBetweenCommands * index + (member.delay || 0)\r\n                                            )}\r\n                                            helperText={stacked ? I18n.t('from previous state') : I18n.t('from start of scene')}\r\n                                            value={member.delay || 0}\r\n                                            min={0}\r\n                                            type=\"number\"\r\n                                            onChange={e => {\r\n                                                const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                members[index].delay = parseInt(e.target.value, 10);\r\n                                                this.setStateWithParent({members});\r\n                                            }}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={4}>\r\n                                        {!stacked ? <FormControlLabel\r\n                                            label={I18n.t('Stack next delays')}\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    checked={!!member.stackNextDelays}\r\n                                                    onChange={e => {\r\n                                                        const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                        members[index].stackNextDelays = e.target.checked;\r\n                                                        this.setStateWithParent({members});\r\n                                                    }}\r\n                                                />\r\n                                            }/> : null}\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={4}>\r\n                                        <FormControlLabel\r\n                                            label={I18n.t('Stop already started commands')}\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    checked={member.stopAllDelays}\r\n                                                    onChange={e => {\r\n                                                        const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                        members[index].stopAllDelays = e.target.checked;\r\n                                                        this.setStateWithParent({members});\r\n                                                    }}\r\n                                                />\r\n                                            }/>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Box> : null\r\n                        }\r\n                        {!this.state.easy ?\r\n                            <Box className={classes.p}>\r\n                                <FormControlLabel\r\n                                    label={I18n.t('Do not overwrite state if it has the required value')}\r\n                                    title={\r\n                                        I18n.t('For example, if the value is already at \"%s\" and \"%s\" is the setpoint, then write the value anyway if this checkbox is activated.',\r\n                                            member.setIfTrue === undefined || member.setIfTrue === null ? 'null' : member.setIfTrue.toString(),\r\n                                            member.setIfTrue === undefined || member.setIfTrue === null ? 'null' : member.setIfTrue.toString())\r\n                                    }\r\n                                    control={\r\n                                        <Checkbox\r\n                                            checked={!!member.doNotOverwrite}\r\n                                            onChange={e => {\r\n                                                const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                members[index].doNotOverwrite = e.target.checked;\r\n                                                this.setStateWithParent({members});\r\n                                            }}\r\n                                        />\r\n                                    }/>\r\n                            </Box> : null\r\n                        }\r\n                    </div> :\r\n                    (!this.state.virtualGroup ? <div className={ classes.smallOnTrueFalse }>\r\n                        { setIfTrueVisible ? `${onFalseEnabled ? I18n.t('Set if TRUE') : I18n.t('Setpoint')}: ` : ''}\r\n                        { setIfTrueVisible ? <span className={ classes.stateValueTrue }>{ setIfTrue }</span> : null }\r\n                        { setIfFalseVisible && onFalseEnabled ? `${setIfTrueVisible ? ' / ' : ''}${I18n.t('Set if FALSE')}: ` : null}\r\n                        { setIfFalseVisible && onFalseEnabled ? <span className={ classes.stateValueFalse }>{ setIfFalse }</span> : null}\r\n                    </div> : <div style={ {height: 8} }/>)\r\n            }\r\n        </Paper>\r\n    };\r\n\r\n    onWriteScene(val) {\r\n        if (val === 'true') {\r\n            val = true;\r\n        } else if (val === 'false') {\r\n            val = false;\r\n        } else if (typeof val === 'string' && parseFloat(val.replace(',', '.')).toString() === val) {\r\n            val = parseFloat(val.replace(',', '.'));\r\n        }\r\n\r\n        this.props.socket.setState(this.props.sceneId, val)\r\n            .catch(e => this.props.showError(e));\r\n    }\r\n\r\n    getItemStyle = (isDragging, draggableStyle) => ({\r\n        // some basic styles to make the items look a bit nicer\r\n        userSelect: 'none',\r\n        background: isDragging ? 'lightgreen' : 'inherit',\r\n\r\n        // styles we need to apply on draggables\r\n        ...draggableStyle\r\n    });\r\n\r\n    getListStyle = isDraggingOver => ({background: isDraggingOver ? 'lightblue' : 'inherit'});\r\n\r\n    render = () => {\r\n        let sceneState = this.state.states[this.props.sceneId];\r\n        if (this.state.selectedSceneChanged) {\r\n            sceneState = I18n.t('Save scene before test');\r\n        } else if (sceneState === undefined || sceneState === null) {\r\n            sceneState = '';\r\n        }\r\n\r\n        if (this.engineId !== this.state.engineId) {\r\n            this.engineId && this.props.socket.unsubscribeState(this.engineId + '.alive', this.memberStateChange);\r\n            this.state.engineId && this.props.socket.subscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n            this.engineId = this.state.engineId;\r\n        }\r\n\r\n        const onFalseEnabled =!this.state.virtualGroup && this.state.onFalseEnabled;\r\n\r\n        let result = <div key=\"SceneMembersForm\" className={ clsx(!this.props.oneColumn && this.props.classes.height, this.props.classes.columnContainer) }>\r\n            <Toolbar classes={{ gutters: this.props.classes.guttersZero }}>\r\n                <Typography variant=\"h6\" className={ clsx(this.props.classes.sceneTitle) } >\r\n                    { I18n.t('Scene states') }{ !this.state.states[this.state.engineId + '.alive'] ? <span className={ this.props.classes.instanceNotActive }>{ I18n.t('Instance not active') }</span> : ''}\r\n                    <br/>\r\n                    <span className={ clsx(\r\n                        this.props.classes.sceneSubTitle,\r\n                        !this.state.virtualGroup && sceneState === true && this.props.classes.sceneTrue,\r\n                        !this.state.virtualGroup && sceneState === false && this.props.classes.sceneFalse,\r\n                        !this.state.virtualGroup && sceneState === 'uncertain' && this.props.classes.sceneUncertain,\r\n                    ) }>{ I18n.t('Scene state:') } { sceneState === true ? 'TRUE' : (sceneState === false ? 'FALSE' : sceneState.toString()) }</span>\r\n                </Typography>\r\n                <IconButton title={I18n.t('Add new state')} onClick={() => this.setState({showDialog: true})}>\r\n                    <IconAdd/>\r\n                </IconButton>\r\n            </Toolbar>\r\n            <div className={ clsx(this.props.classes.testButtons, this.props.classes.width100) }>\r\n                {  !this.state.selectedSceneChanged && this.state.virtualGroup ? <TextField\r\n                    className={ this.props.classes.width100WithButton }\r\n                    label={ I18n.t('Write to virtual group') }\r\n                    defaultValue={ sceneState }\r\n                    onKeyUp={e => e.keyCode === 13 && this.onWriteScene(this.state.writeSceneState)}\r\n                    onChange={e => this.setState({writeSceneState: e.target.value}) }\r\n                /> : null}\r\n                { !this.state.selectedSceneChanged && this.state.virtualGroup && this.state.members.length ? <IconButton\r\n                    onClick={e => this.onWriteScene(this.state.writeSceneState) }\r\n                ><IconPlay/></IconButton> : null}\r\n                { this.state.sceneEnabled && !this.state.selectedSceneChanged && !this.state.virtualGroup ? <Button\r\n                    className={ this.props.classes.btnTestTrue }\r\n                    onClick={ () => this.onWriteScene(true) }\r\n                ><IconPlay/>{ !onFalseEnabled ? I18n.t('Test') : I18n.t('Test TRUE') }</Button> : null }\r\n                { this.state.sceneEnabled && !this.state.selectedSceneChanged && onFalseEnabled && this.state.members.length ? <Button\r\n                    className={ this.props.classes.btnTestFalse }\r\n                    onClick={ () => this.onWriteScene(false) }\r\n                ><IconPlay/>{ I18n.t('Test FALSE') }</Button> : null }\r\n                {this.state.members.length > 1 && this.state.openedMembers.length ? <IconButton\r\n                    title={I18n.t('Collapse all')}\r\n                    className={ this.props.classes.btnCollapseAll }\r\n                    onClick={ () => {\r\n                        window.localStorage.setItem('Scenes.openedMembers', '[]');\r\n                        this.setState({openedMembers: []});\r\n                    } }\r\n                ><IconCollapseAll/></IconButton> : null }\r\n                {this.state.members.length > 1 && this.state.openedMembers.length !== this.state.members.length ? <IconButton\r\n                    title={I18n.t('Expand all')}\r\n                    className={ this.props.classes.btnExpandAll }\r\n                    onClick={ () => {\r\n                        const openedMembers = this.state.members.map(member => member.id);\r\n                        window.localStorage.setItem('Scenes.openedMembers', JSON.stringify(openedMembers));\r\n                        this.setState({openedMembers});\r\n                    } }\r\n                ><IconExpandAll/></IconButton> : null }\r\n            </div>\r\n            <DragDropContext onDragEnd={ this.onDragEnd }>\r\n                <Droppable droppableId=\"droppable\">\r\n                    {(provided, snapshot) => (\r\n                        <div className={ this.props.classes.scroll }\r\n                             {...provided.droppableProps}\r\n                             ref={ provided.innerRef }\r\n                             style={ this.getListStyle(snapshot.isDraggingOver) }\r\n                        >\r\n                            { this.state.members.map((member, i) =>\r\n                                <Draggable key={ member.id + '_' + i } draggableId={ member.id + '_' + i } index={ i }>\r\n                                    {(provided, snapshot) =>\r\n                                        <div\r\n                                            ref={ provided.innerRef }\r\n                                            {...provided.draggableProps }\r\n                                            {...provided.dragHandleProps }\r\n                                            style={ this.getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                            ) }\r\n                                        >{ this.renderMember(member, i) }</div>}\r\n                                </Draggable>\r\n                            )}\r\n                            { provided.placeholder }\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>;\r\n\r\n        return [\r\n            result,\r\n            this.renderDeleteDialog(),\r\n            this.renderSelectIdDialog(),\r\n            this.renderSelectStateIdDialog(),\r\n        ];\r\n    }\r\n}\r\n\r\nSceneMembersForm.propTypes = {\r\n    classes: PropTypes.object,\r\n    socket: PropTypes.object,\r\n    scene: PropTypes.object,\r\n    updateSceneMembers: PropTypes.func,\r\n    sceneId: PropTypes.string,\r\n    onFalseEnabled: PropTypes.bool,\r\n    virtualGroup: PropTypes.bool,\r\n    aggregation: PropTypes.string,\r\n    members: PropTypes.array,\r\n    easy: PropTypes.bool,\r\n    sceneEnabled: PropTypes.bool,\r\n    selectedSceneChanged: PropTypes.bool,\r\n    intervalBetweenCommands: PropTypes.number,\r\n    engineId: PropTypes.string,\r\n    oneColumn: PropTypes.bool,\r\n    showError: PropTypes.func,\r\n};\r\n\r\nexport default withStyles(styles)(SceneMembersForm);","// Common\nimport React from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Alert from '@material-ui/lab/Alert';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nimport AceEditor from 'react-ace';\nimport 'ace-builds/src-noconflict/mode-json';\nimport 'ace-builds/src-noconflict/theme-clouds_midnight';\nimport 'ace-builds/src-noconflict/theme-chrome';\nimport 'ace-builds/src-noconflict/ext-language_tools'\n\n// icons\nimport {MdClose as IconClose} from 'react-icons/md';\nimport IconCopy from '@iobroker/adapter-react/icons/IconCopy';\nimport {MdCheck as IconCheck} from 'react-icons/md';\n\n// Own\nimport I18n from '@iobroker/adapter-react/i18n';\nimport copy from '@iobroker/adapter-react/Components/copy-to-clipboard';\n\nconst styles = theme => ({\n    divWithoutTitle: {\n        width: '100%',\n        height: '100%',\n        border: '2px solid #00000000',\n    },\n    error: {\n        border: '2px solid #FF0000',\n    },\n});\n\nclass ExportImportDialog extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            text: props.sceneObj ? JSON.stringify(props.sceneObj, null, 2) : '',\n            error: false,\n            toast: '',\n        };\n    }\n\n    onChange(value) {\n        const newState = {text: value};\n        try {\n            JSON.parse(value);\n            if (this.state.error) {\n                newState.error = false;\n            }\n\n            this.setState(newState);\n        } catch (e) {\n            newState.error = true;\n            this.setState(newState);\n        }\n    }\n\n    renderToast() {\n        return <Snackbar open={ !!this.state.toast } autoHideDuration={ 3000 } onClick={ () => this.setState({ toast: '' }) } onClose={ () => this.setState({ toast: '' }) }>\n            <Alert color=\"info\" severity=\"success\" >{ this.state.toast }</Alert>\n        </Snackbar>;\n    }\n\n    render() {\n        return <Dialog\n            open={ true }\n            onClose={ () => this.props.onClose() }\n            aria-labelledby=\"export-dialog-title\"\n            fullWidth\n            maxWidth=\"lg\"\n            fullScreen={ true }\n            aria-describedby=\"export-dialog-description\"\n        >\n            <DialogTitle id=\"export-dialog-title\">{ this.props.isImport ? I18n.t('Import scene') : I18n.t('Export scene') }</DialogTitle>\n            <DialogContent>\n                <div className={ clsx(this.props.classes.divWithoutTitle, this.state.error && this.props.classes.error) }>\n                    <AceEditor\n                        autoFocus\n                        mode=\"json\"\n                        width=\"100%\"\n                        height=\"100%\"\n                        onLoad={editor => {\n                            this.codeEditor = editor;\n                            this.codeEditor.focus();\n                        }}\n                        theme={ this.props.themeType === 'dark' ? 'clouds_midnight' : 'chrome' }\n                        onChange={ newValue => this.onChange(newValue) }\n                        value={ this.state.text || '' }\n                        name=\"UNIQUE_ID_OF_DIV\"\n                        fontSize={ 14 }\n                        readOnly={ !this.props.isImport }\n                        editorProps={{ $blockScrolling: true }}\n                    />\n                </div>\n            </DialogContent>\n            <DialogActions>\n                { this.props.isImport ?\n                    <Button\n                        disabled={ !this.state.text || this.state.error }\n                        onClick={ () => this.props.onClose(JSON.parse(this.state.text)) }\n                        color=\"primary\"\n                        startIcon={<IconCheck />}\n                    >\n                        { I18n.t('Import') }\n                    </Button>\n                    :\n                    <Button\n                        onClick={ () => {\n                            copy(this.state.text);\n                            this.setState({ toast: I18n.t('Copied') });\n                            setTimeout(() => this.props.onClose(), 500);\n                        }}\n                        color=\"primary\"\n                        autoFocus\n                        startIcon={<IconCopy />}\n                    >\n                        { I18n.t('Copy to clipboard') }\n                    </Button>}\n                <Button\n                    onClick={ () => this.props.onClose() }\n                    autoFocus={ !this.props.isImport }\n                    startIcon={<IconClose />}\n                >\n                    { I18n.t('Close') }\n                </Button>\n                { this.renderToast() }\n            </DialogActions>\n        </Dialog>;\n    }\n}\n\nExportImportDialog.propTypes = {\n    classes: PropTypes.object,\n    sceneObj: PropTypes.object,\n    themeType: PropTypes.string,\n    onClose: PropTypes.func,\n    isImport: PropTypes.bool,\n};\n\nexport default withStyles(styles)(ExportImportDialog);","import React from 'react'\nimport clsx from 'clsx'\nimport PropTypes from 'prop-types';\nimport {withStyles} from '@material-ui/core/styles';\nimport { useDrag, useDrop, DndProvider as DragDropContext } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend'\n\nimport List from '@material-ui/core/List';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport I18n from '@iobroker/adapter-react/i18n';\nimport SearchIcon from '@material-ui/icons/Search';\nimport TextField from '@material-ui/core/TextField';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport {FaFolder as IconFolderClosed, FaFolderOpen as IconFolderOpened, FaScroll as IconScript} from 'react-icons/fa';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Switch from '@material-ui/core/Switch';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\n\n// icons\nimport {MdExpandLess as IconCollapse} from 'react-icons/md';\nimport {MdExpandMore as IconExpand} from 'react-icons/md';\nimport {MdModeEdit as IconEdit} from 'react-icons/md';\nimport {MdClose as IconCancel} from 'react-icons/md';\nimport {MdCheck as IconCheck} from 'react-icons/md';\nimport {MdAdd as IconAdd} from 'react-icons/md';\nimport {MdCreateNewFolder as IconFolderAdd} from 'react-icons/md';\nimport {MdSwapVert as IconReorder} from 'react-icons/md';\n\nimport Utils from '@iobroker/adapter-react/Components/Utils';\n\nconst LEVEL_PADDING = 16;\n\nexport const Droppable = (props) => {\n    const { onDrop} = props;\n\n    const [{ isOver, isOverAny}, drop] = useDrop({\n        accept: ['item'],\n        drop: e => isOver ? onDrop(e) : undefined,\n        collect: monitor => ({\n            isOver: monitor.isOver({ shallow: true }),\n            isOverAny: monitor.isOver(),\n        }),\n    });\n\n    return <div ref={drop} className={clsx(isOver && 'js-folder-dragover', isOverAny && 'js-folder-dragging')}>\n        {props.children}\n    </div>;\n};\n\nexport const Draggable = (props) => {\n    const { name } = props;\n    const [{ opacity }, drag] = useDrag({\n        item: {\n            name,\n            type: 'item'\n        },\n        collect: (monitor) => ({\n            opacity: monitor.isDragging() ? 0.3 : 1,\n        }),\n    });\n\n    // About transform: https://github.com/react-dnd/react-dnd/issues/832#issuecomment-442071628\n    return <div ref={drag} style={{ opacity, transform: 'translate3d(0, 0, 0)' }}>\n        {props.children}\n    </div>;\n};\n\nconst styles = theme => ({\n    scroll: {\n        overflowY: 'auto',\n        overflowX: 'hidden',\n        height: '100%',\n        width: '100%',\n    },\n    right: {\n        float: 'right',\n    },\n    heightMinusToolbar: {\n        height: 'calc(100% - 48px)',\n    },\n    mainToolbar: {\n        background: theme.palette.primary.main,\n    },\n    textInput: {\n        display: 'block',\n    },\n    noGutters: {\n        paddingLeft: 0,\n        paddingRight: 0,\n    },\n    noPaddings: {\n        paddingTop: 0,\n        paddingBottom: 0,\n    },\n    itemIcon: {\n        width: 24,\n        height: 24,\n    },\n    itemIconRoot: {\n        minWidth: 24 + theme.spacing(1),\n    },\n    width100: {\n        width: '100%',\n    },\n    leftMenuItem: {\n        display: 'block',\n        borderRadius: 10,\n    },\n    alignRight: {\n        textAlign: 'right',\n    },\n    itemIconFolder: {\n        color: theme.palette.type === 'dark' ? '#ffca2c' : '#ffca2c'\n    },\n    changed: {\n        position: 'relative',\n        '&:after': {\n            content: '\"\"',\n            width: 6,\n            height: 6,\n            borderRadius: 6,\n            background: '#FF0000',\n            position: 'absolute',\n            top: 5,\n            right: 5,\n        },\n    },\n    disabled: {\n        opacity: 0.3\n    },\n    folderItem: {\n        fontWeight: 'bold',\n        cursor: 'pointer',\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\n    },\n    listItemTitle: {\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\n    },\n    listItemSubTitle: {\n        color: theme.palette.type === 'dark' ? '#bababa': '#2a2a2a',\n    },\n    list: {\n        width: '100%',\n        padding: 0,\n    },\n    p: {\n        margin: '1em 0',\n    },\n    folderButtons:  {\n        height: 32,\n    },\n    mainList: {\n        width: 'calc(100% - ' + theme.spacing(1) + 'px)',\n        marginLeft: theme.spacing(1),\n        '& .js-folder-dragover>li.folder-reorder': {\n            background: '#40adff'\n        },\n        '& .js-folder-dragging .folder-reorder': {\n            opacity: 1,\n        },\n        '& .js-folder-dragging .item-reorder': {\n            opacity: 0.3,\n        }\n    }\n});\n\nclass ScenesList extends React.Component {\n    constructor(props) {\n        super(props);\n\n        let opened;\n        try {\n            opened = JSON.parse(window.localStorage.getItem('Scenes.opened')) || [];\n        } catch (e) {\n            opened = [];\n        }\n\n        this.state = {\n            opened,\n            search: '',\n            reorder: false,\n            showSearch: false,\n            addFolderDialog: null,\n            addFolderDialogTitle: null,\n            editFolderDialogeditFolderDialog: null,\n            editFolderDialogTitle: null,\n        };\n    }\n\n    onAddFolder(parent, id) {\n        let opened = JSON.parse(JSON.stringify(this.state.opened));\n        opened.push(id);\n        this.setState({addFolderDialog: null, opened}, () =>\n            this.props.onCreateFolder(parent, id));\n    }\n\n    renderAddFolderDialog() {\n        return this.state.addFolderDialog ?\n            <Dialog\n                key=\"addDialog\"\n                open={ !!this.state.addFolderDialog }\n                onClose={ () => this.setState({addFolderDialog: null}) }\n            >\n                <DialogTitle>{I18n.t('Create folder')}</DialogTitle>\n                <DialogContent className={ this.props.classes.p }>\n                    <TextField\n                        autoFocus\n                        label={ I18n.t('Title') }\n                        value={ this.state.addFolderDialogTitle }\n                        onChange={ e =>\n                            this.setState({addFolderDialogTitle: e.target.value.replace(Utils.FORBIDDEN_CHARS, '_').replace(/\\./g, '_')}) }\n                        onKeyUp={e => e.keyCode === 13 && this.onAddFolder(this.state.addFolderDialog, this.state.addFolderDialogTitle) }\n                    />\n                </DialogContent>\n                <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\n                    <Button\n                        variant=\"contained\"\n                        disabled={!this.state.addFolderDialogTitle || Object.keys(this.props.folders.subFolders).find(name => name === this.state.addFolderDialogTitle)}\n                        onClick={() => this.onAddFolder(this.state.addFolderDialog, this.state.addFolderDialogTitle)}\n                        color=\"primary\"\n                        autoFocus\n                        startIcon={<IconCheck className={ this.props.classes.buttonIcon }/>}\n                    >\n                        {I18n.t('Create')}\n                    </Button>\n                    <Button variant=\"contained\" onClick={ () => this.setState({addFolderDialog: null}) }>\n                        <IconCancel className={ this.props.classes.buttonIcon }/>\n                        { I18n.t('Cancel') }\n                    </Button>\n                </DialogActions>\n            </Dialog> : null;\n    }\n\n    onRenameFolder(folder, newName) {\n        let pos;\n\n        // if selected folder opened, replace its ID in this.state.opened\n        if ((pos = this.state.opened.indexOf(folder.prefix)) !== -1) {\n            const opened = [...this.state.opened];\n            opened.splice(pos, 1);\n            opened.push(newName);\n            opened.sort();\n            this.setState({opened});\n        }\n\n        return this.props.onRenameFolder(this.state.editFolderDialog, this.state.editFolderDialogTitle)\n            .then(() => this.setState({editFolderDialog: null}));\n    }\n\n    renderEditFolderDialog() {\n        if (!this.state.editFolderDialog) {\n            return;\n        }\n\n        const isUnique = !Object.keys(this.props.folders.subFolders).find(folder => folder.id === this.state.editFolderDialogTitle);\n\n        return <Dialog\n            key=\"dialogEdit\"\n            open={ !!this.state.editFolderDialog }\n            onClose={ () => this.setState({editFolderDialog: null}) }\n        >\n            <DialogTitle>{ I18n.t('Edit folder') }</DialogTitle>\n            <DialogContent>\n                <TextField\n                    autoFocus={true}\n                    label={ I18n.t('Title') }\n                    value={ this.state.editFolderDialogTitle }\n                    onChange={ e => this.setState({editFolderDialogTitle: e.target.value.replace(Utils.FORBIDDEN_CHARS, '_').replace(/\\./g, '_')}) }\n                    onKeyUp={e => e.keyCode === 13 && this.onRenameFolder(this.state.editFolderDialog, this.state.editFolderDialogTitle) }\n                />\n            </DialogContent>\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\n                <Button\n                    variant=\"contained\"\n                    disabled={ !this.state.editFolderDialogTitle || this.state.editFolderDialogTitleOrigin === this.state.editFolderDialogTitle || !isUnique}\n                    onClick={() => this.onRenameFolder(this.state.editFolderDialog, this.state.editFolderDialogTitle)}\n                    color=\"primary\"\n                    autoFocus\n                    startIcon={<IconCheck/>}\n                >\n                    { I18n.t('Apply') }\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    onClick={ () => this.setState({editFolderDialog: null}) }\n                    startIcon={<IconCancel />}\n                >\n                    { I18n.t('Cancel') }\n                </Button>\n            </DialogActions>\n        </Dialog>;\n    }\n\n    toggleFolder(folder) {\n        const opened = [...this.state.opened];\n        const pos = opened.indexOf(folder.prefix);\n        if (pos === -1) {\n            opened.push(folder.prefix);\n        } else {\n            opened.splice(pos, 1);\n\n            // If active scene is inside this folder select the first scene\n            if (Object.keys(folder.scenes).includes(this.props.selectedSceneId)) {\n                // To do ask question\n                if (this.props.selectedSceneChanged) {\n                    this.confirmCb = () => {\n                        this.setState({selectedSceneId: '', selectedSceneData: null, selectedSceneChanged: false, opened});\n                        window.localStorage.setItem('Scenes.opened', JSON.stringify(opened));\n                    };\n                    return this.setState({sceneChangeDialog: 'empty'});\n                }\n\n                this.setState({selectedSceneId: '', selectedSceneData: null, selectedSceneChanged: false});\n            }\n        }\n\n        window.localStorage.setItem('Scenes.opened', JSON.stringify(opened));\n\n        this.setState({opened});\n    }\n\n    renderTreeScene = (item, level) => {\n        const scene = this.props.scenes[item._id];\n        if (!scene || (this.state.search && !item.common.name.includes(this.state.search))) {\n            return null;\n        }\n\n        level = level || 0;\n\n        const changed = this.props.selectedSceneId && this.props.selectedSceneId === scene._id && this.props.selectedSceneChanged;\n\n        const listItem = <ListItem\n            style={ {paddingLeft: (this.state.reorder ? level : (level - 1)) * LEVEL_PADDING} }\n            key={ item._id }\n            classes={{root: this.props.classes.noPaddings}}\n            selected={ this.props.selectedSceneId ? this.props.selectedSceneId === scene._id : false }\n            button\n            className={ clsx(\n                changed && this.props.classes.changed,\n                !scene.common.enabled && this.props.classes.disabled,\n                this.state.reorder && 'item-reorder'\n            ) }\n            onClick={ () => this.props.onSceneSelect(scene._id) }>\n            <ListItemIcon classes={ {root: this.props.classes.itemIconRoot} }><IconScript className={ this.props.classes.itemIcon }/></ListItemIcon>\n            <ListItemText\n                classes={ {primary: this.props.classes.listItemTitle, secondary: this.props.classes.listItemSubTitle} }\n                primary={ Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}) }\n                secondary={ Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}, true) }\n            />\n            {!this.state.reorder ? <ListItemSecondaryAction>\n                {this.state.changingScene === scene._id ?\n                    <CircularProgress size={ 24 }/>\n                    :\n                    <Switch\n                        checked={ scene.common.enabled }\n                        onChange={event => this.props.onSceneEnableDisable(event.target.name) }\n                        name={ scene._id }\n                    />\n                }\n            </ListItemSecondaryAction> : null}\n        </ListItem>;\n\n        if (this.state.reorder) {\n            return <Draggable key={'draggable_' + item._id} name={item._id}>{listItem}</Draggable>;\n        } else {\n            return  listItem;\n        }\n    };\n\n    onDragFinish(source, target) {\n        console.log('Rename ' + source + ' => ' + target);\n        let newId = target + '.' + source.split('.').pop();\n        if (source !== newId) {\n            if (this.props.scenes[newId]) {\n                newId += '_' + I18n.t('copy');\n            }\n            this.props.onMoveScene(source, newId);\n        }\n    }\n\n    renderTree(parent, level) {\n        let result = [];\n        level = level || 0;\n        let opened = this.state.reorder ||(this.state.opened ? this.state.opened.includes(parent.prefix) : false);\n\n        const reactChildren = [];\n        if (parent && (opened || !parent.id)) { // root cannot be closed and have id === ''\n            const values     = Object.values(parent.scenes);\n            const subFolders = Object.values(parent.subFolders);\n\n            // add first sub-folders\n            subFolders\n                .sort((a, b) => a.id > b.id ? 1 : (a.id < b.id ? -1 : 0))\n                .forEach(subFolder =>\n                    reactChildren.push(this.renderTree(subFolder, level + 1)));\n\n            // Add as second scenes\n            if (values.length || subFolders.length) {\n                values\n                    .sort((a, b) => a._id > b._id ? 1 : (a._id < b._id ? -1 : 0))\n                    .forEach(scene =>\n                        reactChildren.push(this.renderTreeScene(scene, level + 1)));\n            } else {\n                reactChildren.push(<ListItem><ListItemText className={ this.props.classes.folderItem}>{ I18n.t('No scenes created yet')}</ListItemText></ListItem>);\n            }\n        }\n\n        // Show folder item\n        if (parent && (parent.id || this.state.reorder)) {\n            const folder = <ListItem\n                key={ parent.prefix }\n                classes={ {gutters: this.props.classes.noGutters, root: this.props.classes.noPaddings} }\n                className={ clsx(this.props.classes.width100, this.props.classes.folderItem, this.state.reorder && 'folder-reorder') }\n                style={ {paddingLeft: (this.state.reorder ? level : (level - 1)) * LEVEL_PADDING} }\n            >\n                <ListItemIcon classes={ {root: this.props.classes.itemIconRoot} } onClick={ () => this.toggleFolder(parent) }>{ opened ?\n                    <IconFolderOpened className={ clsx(this.props.classes.itemIcon, this.props.classes.itemIconFolder) }/> :\n                    <IconFolderClosed className={ clsx(this.props.classes.itemIcon, this.props.classes.itemIconFolder) }/>\n                }</ListItemIcon>\n                <ListItemText>{ parent.id || I18n.t('Root') }</ListItemText>\n                {!this.state.reorder ? <ListItemSecondaryAction>\n                    {opened ? <IconButton\n                        onClick={() => this.props.onCreateScene(parent.id) }\n                        title={ I18n.t('Create new scene') }\n                    ><IconAdd/></IconButton> : null}\n                    <IconButton\n                        onClick={ () =>\n                            this.setState({\n                                editFolderDialog: parent,\n                                editFolderDialogTitle: parent.id,\n                                editFolderDialogTitleOrigin: parent.id\n                            })\n                        }\n                        title={ I18n.t('Edit folder name') }\n                    ><IconEdit/></IconButton>\n                    <IconButton onClick={ () => this.toggleFolder(parent) } title={ opened ? I18n.t('Collapse') : I18n.t('Expand')  }>\n                        { opened ? <IconExpand/> : <IconCollapse/> }\n                    </IconButton>\n                </ListItemSecondaryAction> : null}\n            </ListItem>;\n\n            if (!this.state.reorder) {\n                result.push(folder);\n            } else {\n                result.push(<Droppable\n                    key={'droppable_' + parent.prefix}\n                    name={parent.prefix}\n                    onDrop={e => this.onDragFinish(e.name, 'scene.0' + (parent.prefix ? '.' : '') + parent.prefix)}\n                >\n                    {folder}\n                </Droppable>);\n            }\n        }\n\n        reactChildren && reactChildren.forEach(r => result.push(r));\n\n        return result;\n    }\n\n    renderListToolbar() {\n        return <Toolbar key=\"toolbar\" variant=\"dense\" className={ this.props.classes.mainToolbar }>\n            {!this.state.reorder ? <IconButton\n                onClick={ () => this.props.onCreateScene() }\n                title={ I18n.t('Create new scene') }\n            ><IconAdd/></IconButton> : null}\n\n                {!this.state.reorder ? <IconButton\n                onClick={ () => this.setState({addFolderDialog: this.props.folders, addFolderDialogTitle: ''}) }\n                title={ I18n.t('Create new folder') }\n            ><IconFolderAdd/></IconButton> : null}\n\n            {!this.state.reorder ? <span className={this.props.classes.right}>\n                <IconButton onClick={() => this.setState({showSearch: !this.state.showSearch}) }>\n                    <SearchIcon/>\n                </IconButton>\n            </span> : null}\n            {this.state.showSearch ?\n                <TextField\n                    value={ this.state.search }\n                    className={ this.props.classes.textInput }\n                    onChange={ e => this.setState({search: e.target.value}) }/>\n                : null\n            }\n            <div style={{flexGrow: 1}}/>\n            {!this.state.showSearch ? <IconButton\n                key=\"reorder\"\n                title={I18n.t('Reorder scenes in folders')}\n                className={this.props.classes.toolbarButtons}\n                style={{color: this.state.reorder ? 'red' : undefined, float: 'right'}}\n                onClick={e => {\n                    e.stopPropagation();\n                    this.setState({reorder: !this.state.reorder});\n                }}\n            ><IconReorder/></IconButton> : null }\n        </Toolbar>;\n    }\n\n    render() {\n        return [\n            this.renderListToolbar(),\n            <div key=\"list\" className={ this.props.classes.heightMinusToolbar }>\n                <DragDropContext backend={HTML5Backend}>\n                    <List className={ clsx(this.props.classes.scroll, this.props.classes.mainList) }>\n                        { this.renderTree(this.props.folders) }\n                    </List>\n                </DragDropContext>\n            </div>,\n            this.renderAddFolderDialog(),\n            this.renderEditFolderDialog()\n        ];\n    }\n}\n\nScenesList.propTypes = {\n    onRenameFolder: PropTypes.func,\n    onCreateScene: PropTypes.func,\n    onCreateFolder: PropTypes.func,\n    onSceneSelect: PropTypes.func,\n    onMoveScene: PropTypes.func,\n    onSceneEnableDisable: PropTypes.func,\n    classes: PropTypes.object,\n    scenes: PropTypes.object,\n    selectedSceneId: PropTypes.string,\n    selectedSceneChanged: PropTypes.bool,\n    theme: PropTypes.object,\n    folders: PropTypes.object,\n};\n\nexport default withStyles(styles)(ScenesList);","// Common\nimport React from 'react';\nimport * as Sentry from '@sentry/browser';\nimport * as SentryIntegrations from '@sentry/integrations';\n\nimport {withStyles} from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport { withTheme } from '@material-ui/core/styles';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport withWidth from '@material-ui/core/withWidth';\n\n// MaterialUi\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport IconButton from '@material-ui/core/IconButton';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Drawer from '@material-ui/core/Drawer';\n\n// Own\nimport Utils from '@iobroker/adapter-react/Components/Utils';\nimport GenericApp from '@iobroker/adapter-react/GenericApp';\nimport Loader from '@iobroker/adapter-react/Components/Loader'\nimport I18n from '@iobroker/adapter-react/i18n';\n\nimport SceneForm from './components/SceneForm';\nimport SceneMembersForm from './components/SceneMembersForm';\nimport ExportImportDialog from './components/ExportImportDialog';\nimport ScenesList from './components/ScenesList';\n\n// icons\nimport {MdClose as IconCancel} from 'react-icons/md';\nimport {MdSave as IconSave} from 'react-icons/md';\nimport {MdDelete as IconDelete} from 'react-icons/md';\nimport {MdCheck as IconCheck} from 'react-icons/md';\nimport {MdFileDownload as IconExport} from 'react-icons/md';\n// import {MdFileUpload as IconImport} from 'react-icons/md';\nimport {FaClone as IconClone} from 'react-icons/fa';\nimport {FaBars as IconMenu} from 'react-icons/fa';\nimport {version} from '../package.json';\n\nconst MARGIN_MEMBERS = 20;\n\nconst styles = theme => ({\n    root: {\n        width: '100%',\n        height: 'calc(100% + 4px)',\n        backgroundColor: theme.palette.type === 'dark' ? '#000': '#fff',\n        overflowX: 'hidden',\n    },\n    width100: {\n        width: '100%',\n    },\n    noGutters: {\n        paddingLeft: 0,\n        paddingRight: 0,\n    },\n    height: {\n        height: '100%',\n    },\n    heightMinus2Toolbars: {\n        height: 'calc(100% - 96px)',\n    },\n    heightMinusMargin: {\n        height: 'calc(100% - ' + MARGIN_MEMBERS + 'px)',\n    },\n    fullWidthContainer: {\n        maxWidth: 'inherit',\n        paddingTop: 2,\n        paddingBottom: 2,\n        paddingLeft: 2,\n        paddingRight: 2,\n        overflow: 'hidden'\n    },\n    columnContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    buttonsContainer1: {\n        '& button': {\n            margin: '0 ' + theme.spacing(1) + 'px',\n        },\n    },\n    alignRight: {\n        textAlign: 'right',\n    },\n    membersCell: {\n        backgroundColor: theme.palette.type === 'dark' ? '#566770': '#ADD8E6',\n        marginTop: MARGIN_MEMBERS,\n        marginRight: theme.spacing(1),\n        marginBottom: theme.spacing(2),\n        paddingTop: 0,\n        paddingLeft: 10,\n        paddingRight: 10,\n        paddingBottom: 10,\n\n        borderRadius: 4,\n        height: 'calc(100% - ' + theme.spacing(1) + 'px)',\n    },\n    sceneTitle: {\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\n        flexGrow: 1,\n        paddingLeft: theme.spacing(1),\n    },\n    sceneSubTitle: {\n        fontSize: 10,\n        display: 'block',\n        fontStyle: 'italic',\n        marginTop: -7,\n    },\n    toolbarButtons: {\n        marginRight: theme.spacing(1),\n    },\n    settingsBackground: {\n        background: theme.palette.type === 'dark' ? '#3a3a3a': '#eeeeee',\n    },\n    drawer: {\n        overflow: 'hidden'\n    },\n});\n\nfunction getUrlQuery() {\n    const parts = (window.location.search || '').replace(/^\\?/, '').split('&');\n    const query = {};\n    parts.forEach(item => {\n        const [name, val] = item.split('=');\n        query[decodeURIComponent(name)] = val !== undefined ? decodeURIComponent(val) : true;\n    });\n    return query;\n}\n\nfunction getFolderPrefix(sceneId) {\n    let result = sceneId.split('.');\n    result.shift();\n    result.shift();\n    result.pop();\n    result = result.join('.');\n    return result;\n}\n\nclass App extends GenericApp {\n    constructor(props) {\n        const extendedProps = {...props};\n        extendedProps.translations = {\n            'en': require('./i18n/en'),\n            'de': require('./i18n/de'),\n            'ru': require('./i18n/ru'),\n            'pt': require('./i18n/pt'),\n            'nl': require('./i18n/nl'),\n            'fr': require('./i18n/fr'),\n            'it': require('./i18n/it'),\n            'es': require('./i18n/es'),\n            'pl': require('./i18n/pl'),\n            'zh-cn': require('./i18n/zh-cn'),\n        };\n\n        super(props, extendedProps);\n\n        const query = getUrlQuery();\n\n        this.port = query.port || (window.location.port === '3000' ? 8081 : window.location.port);\n        this.host = query.host || window.location.hostname;\n\n        window.iobForceHost = this.host;\n    }\n\n    onConnectionReady() {\n        const newState = {\n            lang: this.socket.systemLang,\n            ready: false,\n            selectedSceneId: window.localStorage.getItem('Scenes.selectedSceneId') || '',\n            scenes: {},\n            folders: null,\n            changingScene: '',\n            instances: [],\n            selectedSceneChanged: false,\n            deleteDialog: null,\n            selectedSceneData: null,\n            exportDialog: false,\n            importDialog: false,\n            menuOpened: false,\n        };\n\n        this.socket.getSystemConfig()\n            .then(systemConfig => {\n                newState.systemConfig = systemConfig;\n\n                return this.socket.getAdapterInstances(window.adapterName)\n                    .then(instances => {\n                        const sentryEnabled = systemConfig.common.diag !== 'none' && instances.find(item => !item.common.disableDataReporting);\n                        newState.instances = instances.map(item => item._id);\n\n                        // if not local development\n                        if (window.sentryDSN && sentryEnabled && window.location.host !== 'localhost:3000') {\n                            Sentry.init({\n                                dsn: window.sentryDSN,\n                                release: `iobroker.${window.adapterName}@${version}`,\n                                integrations: [\n                                    new SentryIntegrations.Dedupe()\n                                ]\n                            });\n\n                            // BF 2021.08.31: may be this is not required as executed in adapter-react\n                            this.socket.getObject('system.meta.uuid')\n                                .then(uuidObj => {\n                                    if (uuidObj && uuidObj.native && uuidObj.native.uuid) {\n                                        Sentry.configureScope(scope =>\n                                            scope.setUser({id: uuidObj.native.uuid}));\n                                    }\n                                });\n                        }\n\n                        this.setState(newState, () =>\n                            this.refreshData());\n                    });\n            })\n            .catch(e => this.showError(e));\n    }\n\n    sceneSwitch(id) {\n        let scenes = JSON.parse(JSON.stringify(this.state.scenes));\n\n        if (id === this.state.selectedSceneId) {\n            scenes[id] = JSON.parse(JSON.stringify(this.state.selectedSceneData));\n        }\n\n        scenes[id].common.enabled = !scenes[id].common.enabled;\n\n        return this.socket.setObject(id, scenes[id])\n            .then(() => this.refreshData(id))\n            .catch(e => this.showError(e));\n    }\n\n    buildTree(scenes) {\n        scenes = Object.values(scenes);\n\n        let folders = {subFolders: {}, scenes: {}, id: '', prefix: ''};\n\n        // create missing folders\n        scenes.forEach((scene) => {\n            let id = scene._id;\n            const parts = id.split('.');\n            parts.shift();\n            parts.shift();\n            let currentFolder = folders;\n            let prefix = '';\n            for (let i = 0; i < parts.length - 1; i++) {\n                if (prefix) {\n                    prefix = prefix + '.';\n                }\n                prefix = prefix + parts[i];\n                if (!currentFolder.subFolders[parts[i]]) {\n                    currentFolder.subFolders[parts[i]] = {\n                        subFolders: {},\n                        scenes: {},\n                        id: parts[i],\n                        prefix,\n                    }\n                }\n                currentFolder = currentFolder.subFolders[parts[i]];\n            }\n            currentFolder.scenes[id] = scene;\n        });\n\n        return folders;\n    }\n\n    findFolder(parent, folder) {\n        if (parent.prefix === folder.prefix) {\n            return parent;\n        }\n        for (let index in parent.subFolders) {\n            let result = this.findFolder(parent.subFolders[index], folder);\n            if (result) {\n                return result;\n            }\n        }\n    }\n\n    getData() {\n        let scenes;\n        return this.socket.getObjectView('scene.0.', 'scene.\\u9999', 'state')\n            .then(_scenes => {\n                scenes = _scenes;\n                return {scenes, folders: this.buildTree(scenes)};\n            })\n            .catch(e => this.showError(e));\n    }\n\n    refreshData(changingScene) {\n        const that = this;\n        return new Promise(resolve => {\n            if (changingScene) {\n                this.setState({changingScene}, () => resolve());\n            } else {\n                this.setState({ready: false}, () => resolve());\n            }\n        })\n            .then(() => this.getData())\n            .then(newState => {\n                newState.ready = true;\n                newState.changingScene = '';\n                newState.selectedSceneChanged = false;\n\n                // Fill missing data\n                Object.keys(newState.scenes).forEach(id => {\n                    const sceneObj = newState.scenes[id];\n                    sceneObj.common = sceneObj.common || {};\n                    sceneObj.native = sceneObj.native || {};\n\n                    // rename attribute\n                    if (sceneObj.native.burstIntervall !== undefined) {\n                        sceneObj.native.burstInterval = sceneObj.native.burstIntervall;\n                        delete sceneObj.native.burstIntervall;\n                    }\n\n                    sceneObj.native.burstInterval = parseInt(sceneObj.native.burstInterval || 0, 10);\n                    sceneObj.native.onFalse = sceneObj.native.onFalse || {};\n                    sceneObj.native.onTrue  = sceneObj.native.onTrue  || {};\n                    sceneObj.native.onFalse.trigger = sceneObj.native.onFalse.trigger || {condition: '=='};\n                    sceneObj.native.onTrue.trigger  = sceneObj.native.onTrue.trigger  || {condition: '=='};\n                    sceneObj.native.members = sceneObj.native.members || [];\n                    const members = sceneObj.native.members;\n                    delete sceneObj.native.members;\n                    sceneObj.native.members = members; // place it on the last place\n\n                    delete sceneObj.from;\n                    delete sceneObj.user;\n                    delete sceneObj.ts;\n                    delete sceneObj.acl;\n                });\n\n                if (!newState.scenes[this.state.selectedSceneId]) {\n                    newState.selectedSceneId = Object.keys(newState.scenes).shift() || '';\n                }\n\n                if ((newState.selectedSceneId || that.state.selectedSceneId) &&\n                    newState.scenes[newState.selectedSceneId || that.state.selectedSceneId]) {\n                    newState.selectedSceneData = JSON.parse(JSON.stringify(newState.scenes[newState.selectedSceneId || that.state.selectedSceneId]));\n                } else {\n                    newState.selectedSceneData = null;\n                }\n\n                that.setState(newState);\n            });\n    }\n\n    addFolder(parentFolder, id) {\n        let folders = JSON.parse(JSON.stringify(this.state.folders));\n        let _parentFolder = this.findFolder(folders, parentFolder);\n\n        _parentFolder.subFolders[id] = {\n            scenes: {},\n            subFolders: {},\n            id,\n            prefix: _parentFolder.prefix ? _parentFolder.prefix + '.' + id : id\n        };\n\n        this.setState({folders});\n    }\n\n    addSceneToFolderPrefix = (scene, folderPrefix, noRefresh) => {\n        let oldId = scene._id;\n        let sceneId = scene._id.split('.').pop();\n        scene._id = 'scene.0.' + folderPrefix + (folderPrefix ? '.' : '') + sceneId;\n\n        return this.socket.delObject(oldId)\n            .then(() => {\n                console.log('Deleted ' + oldId);\n                return this.socket.setObject(scene._id, scene)\n            })\n            .catch(e => this.showError(e))\n            .then(() => {\n                console.log('Set new ID: ' + scene._id);\n                return !noRefresh && this.refreshData(sceneId)\n                    .then(() => this.changeSelectedScene(scene._id))\n                    .catch(e => this.showError(e));\n            });\n    };\n\n    moveScript(oldId, newId) {\n        const scene = this.state.scenes[oldId];\n        if (this.state.selectedSceneId === oldId) {\n            return this.setState({selectedSceneId: newId}, () => this.moveScript(oldId, newId));\n        }\n\n        scene._id = newId;\n\n        return this.socket.delObject(oldId)\n            .then(() => {\n                console.log('Deleted ' + oldId);\n                return this.socket.setObject(scene._id, scene)\n            })\n            .catch(e => this.showError(e))\n            .then(() => {\n                console.log('Set new ID: ' + scene._id);\n                return this.refreshData(newId)\n                    .then(() => this.changeSelectedScene(scene._id))\n                    .catch(e => this.showError(e));\n            });\n    };\n\n    renameFolder(folder, newName) {\n        return new Promise(resolve => this.setState({changingScene: folder}, () => resolve()))\n            .then(() => {\n                let newSelectedId;\n\n                let prefix = folder.prefix.split('.');\n                prefix[prefix.length - 1] = newName;\n                prefix = prefix.join('.');\n\n                if (Object.keys(folder.scenes).find(id => id === this.state.selectedSceneId)) {\n                    newSelectedId = 'scene.0.' + prefix + '.' + this.state.selectedSceneId.split('.').pop();\n                }\n\n                const promises = Object.keys(folder.scenes).map(sceneId =>\n                    this.addSceneToFolderPrefix(folder.scenes[sceneId], prefix, true));\n\n                return Promise.all(promises)\n                    .then(() => this.refreshData(folder))\n                    .then(() => newSelectedId && this.setState({selectedSceneId: newSelectedId}));\n            });\n    }\n\n    createScene(name, parentId) {\n        let template = {\n            common: {\n                name: '',\n                type: 'mixed', // because it can have value 'uncertain'\n                role: 'scene.state',\n                desc: '',\n                enabled: true,\n                read: true,\n                write: true,\n                def: false,\n                engine: 'system.adapter.scenes.0'\n            },\n            native: {\n                onTrue: {\n                    trigger: {},\n                    cron: null,\n                    astro: null\n                },\n                onFalse: {\n                    enabled: false,\n                    trigger: {},\n                    cron: null,\n                    astro: null\n                },\n                easy: true,\n                members: []\n            },\n            type: 'state'\n        };\n\n        template.common.name = name;\n        let id = 'scene.0.' + (parentId ? parentId + '.' : '') + template.common.name;\n\n        this.setState({changingScene: id}, () =>\n            this.socket.setObject(id, template)\n                .then(() => this.refreshData(id))\n                .then(() => this.changeSelectedScene(id))\n                .catch(e => this.showError(e))\n        );\n    };\n\n    cloneScene(id) {\n        let scene = JSON.parse(JSON.stringify(this.state.scenes[id]));\n        scene._id = scene._id.split('.');\n        scene._id.pop();\n        scene._id.push(this.getNewSceneId());\n        scene._id = scene._id.join('.');\n        scene.common.name = scene.common.name + ' ' + I18n.t('copy');\n\n        this.setState({changingScene: scene._id}, () =>\n            this.socket.setObject(scene._id, scene)\n                .then(() => this.refreshData(scene._id))\n                .then(() => this.changeSelectedScene(scene._id))\n                .catch(e => this.showError(e))\n        );\n    };\n\n    writeScene() {\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\n        scene._id = this.state.selectedSceneId;\n\n        const folder = getFolderPrefix(scene._id);\n        const newId = 'scene.0.' + (folder ? folder + '.' : '') + scene.common.name.replace(Utils.FORBIDDEN_CHARS, '_').replace(/\\./g, '_').replace(/\\s/g, '_');\n\n        if (scene._id !== newId) {\n            // check if the scene name is unique\n            if (Object.keys(this.state.scenes).find(id => id === newId)) {\n                return this.showError(I18n.t('Name is not unique. Please change name before the save.'));\n            }\n\n            // delete first the old scene\n            return this.socket.delObject(scene._id)\n                .then(() => {\n                    scene._id = newId;\n                    return this.socket.setObject(scene._id, scene);\n                })\n                .then(() => this.refreshData(this.state.selectedSceneId))\n                .then(() => this.changeSelectedScene(newId))\n                .catch(e => this.showError(e));\n        } else {\n            return this.socket.setObject(this.state.selectedSceneId, scene)\n                .then(() => this.refreshData(this.state.selectedSceneId))\n                .catch(e => this.showError(e));\n        }\n    }\n\n    updateScene(common, native, cb) {\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\n        if (common) {\n            scene.common = JSON.parse(JSON.stringify(common));\n        }\n        if (native) {\n            const members = scene.native.members;\n            scene.native = JSON.parse(JSON.stringify(native));\n            scene.native.members = members;\n        }\n\n        let selectedSceneChanged = JSON.stringify(this.state.scenes[this.state.selectedSceneId]) !== JSON.stringify(scene);\n        this.setState({selectedSceneChanged, selectedSceneData: scene}, () => cb && cb());\n    };\n\n    deleteScene(id) {\n        return this.socket.delObject(id)\n            .then(() => {\n                if (this.state.selectedSceneId === id) {\n                    return this.refreshData(id)\n                        .then(() => {\n                            const ids = Object.keys(this.state.scenes);\n                            // Find next scene\n                            let nextId = ids.find(_id => _id > id) || '';\n                            if (!nextId) {\n                                // try prev scene\n                                for (let i = ids.length - 1; i >= 0; i--) {\n                                    if (ids[i] < id) {\n                                        nextId = ids[i];\n                                        break;\n                                    }\n                                }\n                            }\n                            if (!nextId && ids.length) {\n                                nextId = ids.shift();\n                            }\n\n                            return this.changeSelectedScene(nextId);\n                        });\n                } else {\n                    return this.refreshData(id);\n                }\n            })\n            .catch(e => this.showError(e));\n    };\n\n    getNewSceneId() {\n        let newId = 0;\n\n        for (const id in this.state.scenes) {\n            let shortId = id.split('.').pop();\n            let matches = shortId.match(/^scene([0-9]+)$/);\n            if (matches && parseInt(matches[1], 10) >= newId) {\n                newId = parseInt(matches[1]) + 1;\n            }\n        }\n\n        return 'scene' + newId;\n    };\n\n    updateSceneMembers(members, cb) {\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\n        scene.native.members = JSON.parse(JSON.stringify(members));\n\n        let selectedSceneChanged = JSON.stringify(this.state.scenes[this.state.selectedSceneId]) !== JSON.stringify(scene);\n        this.setState({selectedSceneChanged, selectedSceneData: scene}, () => cb && cb());\n    };\n\n    changeSelectedScene(newId, ignoreUnsaved, cb) {\n        return new Promise(resolve => {\n            if (this.state.selectedSceneId !== newId) {\n                if (this.state.selectedSceneChanged && !ignoreUnsaved) {\n                    this.confirmCb = cb;\n                    this.setState({sceneChangeDialog: newId}, () => resolve());\n                } else {\n                    window.localStorage.setItem('Scenes.selectedSceneId', newId);\n                    this.setState({\n                        selectedSceneData: this.state.scenes[newId] ? JSON.parse(JSON.stringify(this.state.scenes[newId])) : null,\n                        sceneChangeDialog: '',\n                        selectedSceneId: newId || '',\n                        selectedSceneChanged: false,\n                        menuOpened: false,\n                    }, () => {\n                        resolve();\n                        cb && cb();\n                    });\n                }\n            } else {\n                resolve();\n                cb && cb();\n            }\n        });\n    }\n\n    renderSceneChangeDialog() {\n        const that = this;\n        return this.state.sceneChangeDialog ? <Dialog\n            open={ true }\n            key=\"sceneChangeDialog\"\n            onClose={ () => this.setState({sceneChangeDialog: ''}) }>\n                <DialogTitle>{ I18n.t('Are you sure for cancel unsaved changes?') }</DialogTitle>\n                <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\n                    <Button variant=\"contained\" onClick={ () =>\n                        this.changeSelectedScene(this.state.sceneChangeDialog, true, () => {\n                            const cb = this.confirmCb;\n                            this.confirmCb = null;\n                            cb && cb();\n                        })\n                            .catch(() => console.log('ignore')) }>\n                        { I18n.t('Discard') }\n                    </Button>\n                    <Button variant=\"contained\" color=\"secondary\" autoFocus onClick={e => {\n                        // save scene\n                        this.writeScene()\n                            .then(() => that.changeSelectedScene(that.state.sceneChangeDialog === 'empty' ? '' : that.state.sceneChangeDialog, true, () => {\n                                const cb = this.confirmCb;\n                                this.confirmCb = null;\n                                cb && cb();\n                            }))\n                            .catch(() => console.log('ignore'))\n                    }}>\n                        <IconSave/> { I18n.t('Save changes') }\n                    </Button>\n                    <Button variant=\"contained\" onClick={() => {\n                        this.confirmCb = null; // cancel callback\n                        this.setState({sceneChangeDialog: ''});\n                    }}>\n                        <IconCancel/> { I18n.t('Cancel') }\n                    </Button>\n                </DialogActions>\n            </Dialog> : null;\n    };\n\n    renderDeleteDialog() {\n        return this.state.deleteDialog ? <Dialog\n            open={ true }\n            key=\"deleteDialog\"\n            onClose={ () => this.setState({deleteDialog: false}) }\n        >\n            <DialogTitle>{ I18n.t('Are you sure for delete this scene?') }</DialogTitle>\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={e =>\n                        this.setState({deleteDialog: false}, () =>\n                            this.deleteScene(this.state.selectedSceneId))\n                    }\n                    startIcon={<IconDelete />}\n                >\n                    { I18n.t('Delete') }\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    autoFocus\n                    onClick={ () => this.setState({deleteDialog: false}) }\n                    startIcon={<IconCancel />}\n                >\n                    {I18n.t('Cancel')}\n                </Button>\n            </DialogActions>\n        </Dialog> : null;\n    }\n\n    renderExportImportDialog() {\n        if (!this.state.exportDialog && !this.state.importDialog) {\n            return null;\n        }\n\n        return <ExportImportDialog\n            isImport={ !!this.state.importDialog }\n            themeType={ this.state.themeType }\n            onClose={ importedScene => {\n                if (this.state.importDialog && importedScene) {\n                    const scene = this.state.selectedSceneData || this.state.scenes[this.state.selectedSceneId];\n                    importedScene.common._id = scene._id;\n                    importedScene.common.name = scene.name || importedScene.common.name;\n                    this.setState({selectedSceneData: importedScene,  importDialog: false});\n                } else {\n                    this.setState({exportDialog: false, importDialog: false})\n                }\n            } }\n            sceneObj={ this.state.exportDialog ? this.state.selectedSceneData || this.state.scenes[this.state.selectedSceneId] : '' }\n        />\n    }\n\n    renderSceneTopToolbar(showDrawer) {\n        return <Toolbar variant=\"dense\" key=\"topToolbar\" classes={ {gutters: this.props.classes.noGutters} }>\n            { this.props.width !== 'md' && this.props.width !== 'sm' && this.props.width !== 'xs' ? <Typography variant=\"h6\" className={ this.props.classes.sceneTitle }>\n                { I18n.t('Scene options') /*Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}) */}\n                <span className={this.props.classes.sceneSubTitle}>{ Utils.getObjectNameFromObj(this.state.scenes[this.state.selectedSceneId], null, {language: I18n.getLanguage()}, true) }</span>\n            </Typography> : null }\n\n            { showDrawer ? <IconButton aria-label=\"Open list\" title={ I18n.t('Open list') } onClick={ () => this.setState({menuOpened: true}) }><IconMenu/></IconButton> : null }\n            <IconButton aria-label=\"Clone\" title={ I18n.t('Clone') } onClick={ () => this.cloneScene(this.state.selectedSceneId) }><IconClone/></IconButton>\n\n            <IconButton aria-label=\"Delete\" title={ I18n.t('Delete') } onClick={ () => this.setState({deleteDialog: true}) }><IconDelete/></IconButton>\n\n            <IconButton aria-label=\"Export\" title={ I18n.t('Export scene') } onClick={ () => this.setState({exportDialog: true}) }><IconExport/></IconButton>\n\n            {/*<IconButton aria-label=\"Import\" title={ I18n.t('Import scene') } onClick={ () => this.setState({importDialog: true}) }><IconImport/></IconButton>*/}\n        </Toolbar>;\n    }\n\n    renderSceneBottomToolbar() {\n        return <Toolbar variant=\"dense\" key=\"bottomToolbar\" classes={ {gutters: this.props.classes.noGutters} }>\n            <div style={{flexGrow: 1}}/>\n            { this.state.selectedSceneChanged ? <Button\n                className={ this.props.classes.toolbarButtons }\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={() => this.writeScene()}\n                startIcon={<IconCheck />}\n            >\n                { I18n.t('Save') }\n            </Button> : null }\n\n            { this.state.selectedSceneChanged ? <Button\n                className={ this.props.classes.toolbarButtons }\n                variant=\"contained\"\n                startIcon={<IconCancel />}\n                onClick={ () => this.refreshData(this.state.selectedSceneId) }\n            >\n                { I18n.t('Cancel') }\n            </Button> : null }\n        </Toolbar>;\n    }\n\n    renderDrawerContent() {\n        return <ScenesList\n            scenes={this.state.scenes}\n            folders={this.state.folders}\n            selectedSceneId={this.state.selectedSceneId}\n            selectedSceneChanged={this.state.selectedSceneChanged}\n            theme={this.state.theme}\n            onSceneSelect={id =>\n                this.changeSelectedScene(id)\n                    .catch(() => console.log('ignore'))}\n            onSceneEnableDisable={id => this.sceneSwitch(id)}\n            onCreateFolder={(parent, id) => this.addFolder(parent, id)}\n            onCreateScene={parentId => this.createScene(this.getNewSceneId(), parentId)}\n            onRenameFolder={(folder, newId) => this.renameFolder(folder, newId)}\n            onMoveScene={(oldId, newId) => this.moveScript(oldId, newId)}\n            />;\n    }\n\n    renderSceneMembers(oneColumn) {\n        return <SceneMembersForm\n            key={ 'selected' + this.state.selectedSceneId }\n            oneColumn={ oneColumn }\n            showError={ e => this.showError(e) }\n            updateSceneMembers={ (members, cb) => this.updateSceneMembers(members, cb) }\n            selectedSceneChanged={ this.state.selectedSceneChanged }\n            sceneEnabled={ this.state.selectedSceneData.common.enabled }\n            members={ this.state.selectedSceneData.native.members }\n            easy={ !!this.state.selectedSceneData.native.easy }\n            socket={ this.socket }\n            onFalseEnabled={ this.state.selectedSceneData.native.onFalse.enabled }\n            virtualGroup={ this.state.selectedSceneData.native.virtualGroup }\n            aggregation={ this.state.selectedSceneData.native.aggregation }\n            sceneId={ this.state.selectedSceneId }\n            engineId={ this.state.selectedSceneData.common.engine }\n            intervalBetweenCommands={ this.state.selectedSceneData.native.burstInterval || 0 }\n        />;\n    }\n\n    renderSceneSettings(oneColumn) {\n        if (!this.state.selectedSceneData) {\n            this.state.selectedSceneData = JSON.parse(JSON.stringify(this.state.scenes[this.state.selectedSceneId]));\n        }\n\n        return <SceneForm\n            key={ this.state.selectedSceneId }\n            showError={ e => this.showError(e) }\n            oneColumn={ oneColumn }\n            updateScene={ (common, native, cb) => this.updateScene(common, native, cb) }\n            scene={ this.state.selectedSceneData }\n            socket={ this.socket }\n            instances={ this.state.instances }\n        />;\n    }\n\n    renderInOneColumn() {\n        return [\n            <Drawer\n                key=\"drawer\"\n                anchor=\"left\"\n                open={ this.state.menuOpened }\n                onClose={() => this.setState({menuOpened: false}) }\n                classes={ {paper: this.props.classes.drawer }}\n            >\n                { this.renderDrawerContent() }\n            </Drawer>,\n            this.renderSceneTopToolbar(true),\n            this.state.selectedSceneId ? <div\n                    key=\"main\"\n                    className={ this.props.classes.heightMinus2Toolbars }\n                    style={{ overflowY: 'auto', overflowX: 'hidden'}}\n                >\n                    { this.renderSceneSettings(true) }\n                    { this.renderSceneMembers(true) }\n                </div> : null,\n            this.renderSceneBottomToolbar(),\n        ]\n    }\n\n    renderInMoreThanOneColumn() {\n        const showDrawer = this.props.width === 'sm' || this.props.width === 'xs';\n\n        return <Container className={ clsx(this.props.classes.height, this.props.classes.fullWidthContainer) }>\n            <Grid container spacing={ 1 } className={ this.props.classes.height }>\n                { showDrawer ?\n                    <Drawer anchor=\"left\" open={ this.state.menuOpened } onClose={() => this.setState({menuOpened: false}) }>\n                        { this.renderDrawerContent() }\n                    </Drawer> :\n                    <Grid item xs={ 3 } className={ clsx(this.props.classes.columnContainer, this.props.classes.height) }>\n                        { this.renderDrawerContent() }\n                    </Grid>\n                }\n                { this.state.selectedSceneId && this.state.scenes[this.state.selectedSceneId] ?\n                    <Grid item xs={ showDrawer ? 12 : 9 } className={ clsx(this.props.classes.height, this.props.classes.settingsBackground) }>\n                        <Grid container spacing={ 1 } className={ clsx(this.props.classes.height, this.props.classes.settingsBackground) }>\n                            <Grid item xs={ this.props.width === 'xs' ? 12 : 5 } className={ this.props.classes.heightMinus2Toolbars }>\n                                { this.renderSceneTopToolbar(showDrawer) }\n                                <div className={this.props.classes.height}>\n                                    {this.state.selectedSceneId ? this.renderSceneSettings() : null}\n                                </div>\n                                { this.renderSceneBottomToolbar() }\n                            </Grid>\n                            <Grid item xs={ this.props.width === 'xs' ? 12 : 7 } className={ clsx(this.props.classes.height) }>\n                                <div className={ clsx(this.props.classes.heightMinusMargin) }>\n                                    { this.state.selectedSceneId ?\n                                        <div className={ clsx(this.props.classes.membersCell, this.props.classes.height) }>\n                                            { this.renderSceneMembers() }\n                                        </div>\n                                        : null}\n                                </div>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    : null\n                }\n            </Grid>\n        </Container>\n    }\n\n    render() {\n        if (!this.state.ready) {\n            return <MuiThemeProvider theme={ this.state.theme }>\n                <Loader theme={ this.state.themeName }/>\n            </MuiThemeProvider>;\n        }\n\n        const oneColumn = this.props.width === 'xs';\n\n        return (\n            <MuiThemeProvider theme={ this.state.theme }>\n                <div className={ this.props.classes.root }>\n                    { oneColumn ?\n                        this.renderInOneColumn() :\n                        this.renderInMoreThanOneColumn()\n                    }\n\n                    { this.renderSceneChangeDialog() }\n                    { this.renderDeleteDialog() }\n                    { this.renderExportImportDialog() }\n                    { this.renderError() }\n                </div>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default withWidth()(withStyles(styles)(withTheme(App)));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { MuiThemeProvider} from '@material-ui/core/styles';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport App from './App';\nimport { version } from '../package.json';\n\nimport theme from '@iobroker/adapter-react/Theme';\nimport Utils from '@iobroker/adapter-react/Components/Utils';\n\nwindow.adapterName = 'scenes';\nwindow.sentryDSN = 'https://89fc6260a1af4df68f9db767a603b7e5@sentry.iobroker.net/86';\n\nconsole.log('iobroker.' + window.adapterName + '@' + version);\nlet themeName = Utils.getThemeName();\n\nfunction build() {\n    return ReactDOM.render(<MuiThemeProvider theme={ theme(themeName) }>\n        <App onThemeChange={_theme => {\n            themeName = _theme;\n            build();\n        }}/>\n    </MuiThemeProvider>, document.getElementById('root'));\n}\n\n\nbuild();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\n// Service worker works only with HTTPS and valid certificates, so do not enable it\nserviceWorker.unregister();\n\n"],"sourceRoot":""}